// <auto-generated />
using System;
using eShop.Product.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace eShop.Product.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241207000803_Initial_2")]
    partial class Initial_2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eShop.Domain.Entities.Product.BrandEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("eShop.Domain.Entities.Product.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Article")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<Guid>("SellerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BrandId")
                        .IsUnique();

                    b.HasIndex("SellerId")
                        .IsUnique();

                    b.ToTable("Products");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("eShop.Domain.Entities.Product.SellerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Article")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Sellers");
                });

            modelBuilder.Entity("eShop.Domain.Entities.Product.SellerProductsEntity", b =>
                {
                    b.Property<Guid>("SellerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SellerId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("SellerProductsEntity");
                });

            modelBuilder.Entity("eShop.Domain.Entities.Product.ClothingEntity", b =>
                {
                    b.HasBaseType("eShop.Domain.Entities.Product.ProductEntity");

                    b.Property<int>("Audience")
                        .HasColumnType("int");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Clothing", (string)null);
                });

            modelBuilder.Entity("eShop.Domain.Entities.Product.ShoesEntity", b =>
                {
                    b.HasBaseType("eShop.Domain.Entities.Product.ProductEntity");

                    b.Property<int>("Audience")
                        .HasColumnType("int");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Shoes", (string)null);
                });

            modelBuilder.Entity("eShop.Domain.Entities.Product.ProductEntity", b =>
                {
                    b.HasOne("eShop.Domain.Entities.Product.BrandEntity", "Brand")
                        .WithOne()
                        .HasForeignKey("eShop.Domain.Entities.Product.ProductEntity", "BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShop.Domain.Entities.Product.SellerEntity", "Seller")
                        .WithOne()
                        .HasForeignKey("eShop.Domain.Entities.Product.ProductEntity", "SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("eShop.Domain.Entities.Product.SellerProductsEntity", b =>
                {
                    b.HasOne("eShop.Domain.Entities.Product.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShop.Domain.Entities.Product.SellerEntity", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("eShop.Domain.Entities.Product.ClothingEntity", b =>
                {
                    b.HasOne("eShop.Domain.Entities.Product.ProductEntity", null)
                        .WithOne()
                        .HasForeignKey("eShop.Domain.Entities.Product.ClothingEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eShop.Domain.Entities.Product.ShoesEntity", b =>
                {
                    b.HasOne("eShop.Domain.Entities.Product.ProductEntity", null)
                        .WithOne()
                        .HasForeignKey("eShop.Domain.Entities.Product.ShoesEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
