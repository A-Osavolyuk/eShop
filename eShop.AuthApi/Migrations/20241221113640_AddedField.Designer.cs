// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eShop.AuthApi.Data;

#nullable disable

namespace eShop.AuthApi.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20241221113640_AddedField")]
    partial class AddedField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e6d15d97-b803-435a-9dc2-a7c45c08a1af",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "270910a1-d582-4ce0-8b23-c8141d720064",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "26bb7907-e254-41d4-96f0-8afb7deccae4",
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "abb9d2ed-c3d2-4df9-ba88-eab018b95bc3",
                            RoleId = "e6d15d97-b803-435a-9dc2-a7c45c08a1af"
                        },
                        new
                        {
                            UserId = "abb9d2ed-c3d2-4df9-ba88-eab018b95bc3",
                            RoleId = "270910a1-d582-4ce0-8b23-c8141d720064"
                        },
                        new
                        {
                            UserId = "abb9d2ed-c3d2-4df9-ba88-eab018b95bc3",
                            RoleId = "26bb7907-e254-41d4-96f0-8afb7deccae4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("eShop.Domain.Entities.AuthApi.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "abb9d2ed-c3d2-4df9-ba88-eab018b95bc3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9265b0f3-4994-45f9-9d16-7b924b55bc26",
                            Email = "sasha.osavolll111@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SASHA.OSAVOLLL111@GMAIL.COM",
                            NormalizedUserName = "SASHA.OSAVOLLL111@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHeZ7iJce/rkJIBOAFdarWHCG1NUYQ1y67q5EyVGG9ttMlkXR2wxOMAQRsg+HtNtCg==",
                            PhoneNumber = "380686100242",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "2d4b336b-a3b6-4690-b442-7e4eeb35d390",
                            TwoFactorEnabled = false,
                            UserName = "sasha.osavolll111@gmail.com"
                        });
                });

            modelBuilder.Entity("eShop.Domain.Entities.AuthApi.CodeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<int>("CodeType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Codes");
                });

            modelBuilder.Entity("eShop.Domain.Entities.AuthApi.PermissionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dba6e723-ac0f-42a3-91fd-e40bdb08e26b"),
                            Name = "Permission.Account.ManageAccount"
                        },
                        new
                        {
                            Id = new Guid("349898ee-1f26-4877-86ca-0960361b5e3e"),
                            Name = "Permission.Admin.ManageUsers"
                        },
                        new
                        {
                            Id = new Guid("74e0644b-6f9d-4964-a9a6-341a7834cc0e"),
                            Name = "Permission.Admin.ManageLockout"
                        },
                        new
                        {
                            Id = new Guid("e14d7bcf-0ab4-4168-b2b5-ff0894782097"),
                            Name = "Permission.Admin.ManageRoles"
                        },
                        new
                        {
                            Id = new Guid("df258394-6290-43b8-abc9-d52aba8ff6e6"),
                            Name = "Permission.Admin.ManagePermissions"
                        },
                        new
                        {
                            Id = new Guid("3c38ecbf-a14c-4d46-9eab-6b297cca124d"),
                            Name = "Permission.Product.View"
                        },
                        new
                        {
                            Id = new Guid("5034df8e-c656-4f85-b197-7afff97ecad0"),
                            Name = "Permission.Product.Edit"
                        },
                        new
                        {
                            Id = new Guid("25af1455-d0b8-4be3-b6ff-9cf393d59258"),
                            Name = "Permission.Product.Delete"
                        },
                        new
                        {
                            Id = new Guid("a1216fa3-66dd-4a6d-8616-48a7b9900649"),
                            Name = "Permission.Product.Create"
                        });
                });

            modelBuilder.Entity("eShop.Domain.Entities.AuthApi.PersonalDataEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("PersonalData");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2425850c-691c-4057-95fe-f0cc4986ee56"),
                            DateOfBirth = new DateTime(2004, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Alexander",
                            Gender = "Male",
                            LastName = "Osavolyuk",
                            UserId = "abb9d2ed-c3d2-4df9-ba88-eab018b95bc3"
                        });
                });

            modelBuilder.Entity("eShop.Domain.Entities.AuthApi.UserAuthenticationTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserAuthenticationTokens");
                });

            modelBuilder.Entity("eShop.Domain.Entities.AuthApi.UserPermissionsEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermissions");

                    b.HasData(
                        new
                        {
                            UserId = "abb9d2ed-c3d2-4df9-ba88-eab018b95bc3",
                            PermissionId = new Guid("349898ee-1f26-4877-86ca-0960361b5e3e")
                        },
                        new
                        {
                            UserId = "abb9d2ed-c3d2-4df9-ba88-eab018b95bc3",
                            PermissionId = new Guid("74e0644b-6f9d-4964-a9a6-341a7834cc0e")
                        },
                        new
                        {
                            UserId = "abb9d2ed-c3d2-4df9-ba88-eab018b95bc3",
                            PermissionId = new Guid("e14d7bcf-0ab4-4168-b2b5-ff0894782097")
                        },
                        new
                        {
                            UserId = "abb9d2ed-c3d2-4df9-ba88-eab018b95bc3",
                            PermissionId = new Guid("df258394-6290-43b8-abc9-d52aba8ff6e6")
                        },
                        new
                        {
                            UserId = "abb9d2ed-c3d2-4df9-ba88-eab018b95bc3",
                            PermissionId = new Guid("dba6e723-ac0f-42a3-91fd-e40bdb08e26b")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("eShop.Domain.Entities.AuthApi.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("eShop.Domain.Entities.AuthApi.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShop.Domain.Entities.AuthApi.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("eShop.Domain.Entities.AuthApi.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eShop.Domain.Entities.AuthApi.CodeEntity", b =>
                {
                    b.HasOne("eShop.Domain.Entities.AuthApi.AppUser", null)
                        .WithOne()
                        .HasForeignKey("eShop.Domain.Entities.AuthApi.CodeEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eShop.Domain.Entities.AuthApi.PersonalDataEntity", b =>
                {
                    b.HasOne("eShop.Domain.Entities.AuthApi.AppUser", "User")
                        .WithOne("PersonalData")
                        .HasForeignKey("eShop.Domain.Entities.AuthApi.PersonalDataEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("eShop.Domain.Entities.AuthApi.UserAuthenticationTokenEntity", b =>
                {
                    b.HasOne("eShop.Domain.Entities.AuthApi.AppUser", "User")
                        .WithOne("AuthenticationToken")
                        .HasForeignKey("eShop.Domain.Entities.AuthApi.UserAuthenticationTokenEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("eShop.Domain.Entities.AuthApi.UserPermissionsEntity", b =>
                {
                    b.HasOne("eShop.Domain.Entities.AuthApi.PermissionEntity", "PermissionEntity")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eShop.Domain.Entities.AuthApi.AppUser", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionEntity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eShop.Domain.Entities.AuthApi.AppUser", b =>
                {
                    b.Navigation("AuthenticationToken");

                    b.Navigation("Permissions");

                    b.Navigation("PersonalData");
                });

            modelBuilder.Entity("eShop.Domain.Entities.AuthApi.PermissionEntity", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
