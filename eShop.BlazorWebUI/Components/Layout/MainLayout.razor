@using eShop.Infrastructure.Services
@using Severity = MudBlazor.Severity
@inherits LayoutComponentBase

@inject ITokenProvider TokenProvider
@inject ILocalDataAccessor LocalDataAccessor
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICartService CartService
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inject NotificationService NotificationService
@inject IStoreService StoreService
@inject IAuthenticationService authenticationService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authenticationState
@inject IConfiguration Configuration
@inject IMapper Mapper

@using Cart = Domain.Models.Cart

<MudThemeProvider IsDarkMode />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<CascadingValue Value="this">
    <MudLayout Style="height:100vh">
        <MudAppBar Style="height:70px;" Class="align-content-center" Elevation="1">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudText Align="Align.Center" Typo="Typo.h5" Class="ml-3 cursor-pointer" @onclick="@(() => NavigationManager.NavigateTo("/products"))">eShop</MudText>
            <MudSpacer />
            <SearchField />
            <MudSpacer />
            <AuthorizeView>
                <NotAuthorized>
                    <MudButton StartIcon="@Icons.Material.Filled.Login"
                               Color="Color.Primary" Href="/account/login">Log In</MudButton>
                    <MudButton StartIcon="@Icons.Material.Filled.AppRegistration"
                               Color="Color.Primary" Href="/account/register" Class="ml-3">Register</MudButton>
                </NotAuthorized>
                <Authorized>
                    <MudMenu Style="margin-top:6px" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.BottomLeft" ActivationEvent="MouseEvent.LeftClick">
                        <ActivatorContent>
                            @if (NotificationService.NotificationsCount == 0)
                            {
                                <MudAvatar>
                                    <MudImage Alt="avatar" Src="@(string.IsNullOrEmpty(avatarUri) ? Configuration["DefaultAvatar"]! : avatarUri)" />
                                </MudAvatar>
                            }
                            else
                            {
                                <MudBadge Style="margin-top:6px" Max="99" @bind-content="NotificationService.NotificationsCount" Overlap Color="Color.Secondary">
                                    <MudAvatar>
                                        <MudImage Alt="avatar" Src="@(string.IsNullOrEmpty(avatarUri) ? Configuration["DefaultAvatar"]! : avatarUri)" />
                                    </MudAvatar>
                                </MudBadge>
                            }
                        </ActivatorContent>
                        <ChildContent>
                            <MudMenuItem>
                                <MudButton StartIcon="@Icons.Material.Filled.ShoppingCart" Color="Color.Primary" OnClick="@(() => RedirectTo("/cart"))">
                                    Your Cart
                                </MudButton>
                            </MudMenuItem>
                            <MudMenuItem>
                                <MudButton StartIcon="@Icons.Material.Filled.ManageAccounts" Color="Color.Primary" OnClick="@(() => RedirectTo("/profile"))">
                                    Profile
                                </MudButton>
                            </MudMenuItem>
                            <MudMenuItem>
                                <MudButton StartIcon="@Icons.Material.Filled.Settings" Color="Color.Primary" OnClick="@(() => RedirectTo("/setting"))">
                                    Settings
                                </MudButton>
                            </MudMenuItem>
                            <MudDivider />
                            <MudMenuItem>
                                <MudButton StartIcon="@Icons.Material.Filled.Logout" Color="Color.Primary" OnClick="LogoutClick">
                                    Log Out
                                </MudButton>
                            </MudMenuItem>
                        </ChildContent>
                    </MudMenu>
                </Authorized>
            </AuthorizeView>
        </MudAppBar>
        <MudDrawer Style="top:70px" @bind-Open="drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
            <NavMenu />
        </MudDrawer>
        <MudMainContent Style="height:100%">
            <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="py-5 position-relative" Style="height:100%">
                @Body
            </MudContainer>
        </MudMainContent>
    </MudLayout>
</CascadingValue>

@code {
    [CascadingParameter] Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private bool drawerOpen = true;
    private string pageTitle = string.Empty;
    private string avatarUri = string.Empty;
    private UserData user = new();

    void DrawerToggle()
    {
        drawerOpen = !drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetAvatarAsync();
        await EnsureCartAsync();
        await EnsureFavoritesAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var state = await AuthenticationStateTask!;
            if (state.User.Identity is null || !state.User.Identity!.IsAuthenticated)
            {
                var token = await TokenProvider.GetTokenAsync();
                await (AuthenticationStateProvider as ApplicationAuthenticationStateProvider)!.UpdateAuthenticationState(token);
            }  
        }

        await EnsureCartAsync();
        await EnsureFavoritesAsync();
        NotificationService.NotificationsCount = await LocalDataAccessor.GetStoreItemsCountAsync();
    }

    public void RerenderComponent()
    {
        StateHasChanged();
    }

    private string GetPageTitle()
    {
        var builder = new StringBuilder(NavigationManager.Uri);
        builder.Replace(NavigationManager.BaseUri, string.Empty);
        var title = builder.ToString().Split('/').Last();
        var formatedTitle = new StringBuilder(title);
        formatedTitle.Replace(title[0], char.ToUpper(title[0]), 0, 1);
        formatedTitle.Replace("-", " ");
        return formatedTitle.ToString();
    }

    private async Task EnsureCartAsync()
    {
        if (!await LocalDataAccessor.IsFavoritesExistsAsync())
        {
            var userData = await LocalDataAccessor.ReadUserDataAsync();
            var response = await CartService.GetCartAsync(Guid.Parse(userData.UserId));

            if (response.IsSucceeded)
            {
                var data = JsonConvert.DeserializeObject<CartDto>(response.Result!.ToString()!);
                await LocalDataAccessor.CreateCartAsync(Mapper.Map<Cart>(data));
            }
            else
            {
                Snackbar.Add(response.ErrorMessage, Severity.Warning);
            }
        }
    }

    private async Task EnsureFavoritesAsync()
    {
        if (!await LocalDataAccessor.IsFavoritesExistsAsync())
        {
            await LocalDataAccessor.CreateFavoritesAsync(new() {ItemsCount = 0, Products = new() });
        }
    }

    private async Task GetAvatarAsync()
    {
        user = await LocalDataAccessor.ReadUserDataAsync();
        if (user is not null)
        {
            var link = await LocalDataAccessor.ReadAvatarLinkAsync();

            if (string.IsNullOrEmpty(link))
            {
                link = await StoreService.GetUserAvatarAsync(user!.UserId);

                if (string.IsNullOrEmpty(link))
                {
                    avatarUri = Configuration["DefaultAvatar"]!;
                }

                avatarUri = link;
            }
            else
            {
                avatarUri = link;
            }
        }
    }

    private async Task LogoutClick()
    {
        await (authenticationState as ApplicationAuthenticationStateProvider)!.LogOutAsync();
        Snackbar.Add("Successfully logged out.", MudBlazor.Severity.Success);
        NavigationManager.NavigateTo("/account/login");
    }

    private void RedirectTo(string link)
    {
        NavigationManager.NavigateTo(link);
        StateHasChanged();
    }
}
