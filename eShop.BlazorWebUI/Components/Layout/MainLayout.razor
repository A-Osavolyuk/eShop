@inherits LayoutComponentBase

@inject ITokenProvider TokenProvider
@inject ILocalDataAccessor LocalDataAccessor
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICartService CartService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<MudThemeProvider IsDarkMode />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Align="Align.Center" Typo="Typo.h5" Class="ml-3">eShop</MudText>
        <MudSpacer />
        <SearchField />
        <MudSpacer />
        <Menu />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Style="height:100vh">
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="py-5" >
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    [CascadingParameter] Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private bool _drawerOpen = false;
    private string pageTitle = string.Empty;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("setTitle", GetPageTitle());
        if (firstRender)
        {
            var state = await AuthenticationStateTask!;
            if (state.User.Identity is null || !state.User.Identity!.IsAuthenticated)
            {
                var token = await TokenProvider.GetTokenAsync();
                await (AuthenticationStateProvider as ApplicationAuthenticationStateProvider)!.UpdateAuthenticationState(token);
            }
        }
    }

    private string GetPageTitle()
    {
        var builder = new StringBuilder(NavigationManager.Uri);
        builder.Replace(NavigationManager.BaseUri, string.Empty);
        var title = builder.ToString().Split('/').Last();
        var formatedTitle = new StringBuilder(title);
        formatedTitle.Replace(title[0], char.ToUpper(title[0]), 0, 1);
        formatedTitle.Replace("-", " ");
        return formatedTitle.ToString();
    }
}
