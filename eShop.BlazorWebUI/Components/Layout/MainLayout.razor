@using eShop.Infrastructure.Account
@inherits LayoutComponentBase

@inject ITokenProvider TokenProvider
@inject ILocalDataAccessor LocalDataAccessor
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICartService CartService
@inject ISnackbar Snackbar

<MudThemeProvider IsDarkMode />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Align="Align.Center" Typo="Typo.h5" Class="ml-3">eShop</MudText>
        <MudSpacer />
        <SearchField />
        <MudSpacer />
        <Menu />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="py-5">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = false;
    [CascadingParameter] Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var state = await AuthenticationStateTask!;
            if (state.User.Identity is null || !state.User.Identity!.IsAuthenticated)
            {
                var token = await TokenProvider.GetTokenAsync();
                await (AuthenticationStateProvider as ApplicationAuthenticationStateProvider)!.UpdateAuthenticationState(token);
            }
        }

        var cart = await LocalDataAccessor.GetCartAsync();

        if (cart is null)
        {
            await GetCartAsync();
        }
    }

    private async Task GetCartAsync()
    {
        var userId = await LocalDataAccessor.GetUserIdAsync();
        var response = await CartService.GetCartByUserIdAsync(Guid.Parse(userId));

        if (response.IsSucceeded)
        {
            var data = JsonConvert.DeserializeObject<CartDTO>(response.Result.ToString()!);
            await LocalDataAccessor.SetCartAsync(data!);
        }
        else
        {
            Snackbar.Add(response.ErrorMessage, MudBlazor.Severity.Error);
        }
    }

}
