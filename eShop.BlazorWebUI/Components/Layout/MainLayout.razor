@using eShop.Application.Mapping
@using eShop.Domain.DTOs.CartApi
@using eShop.Domain.Models.Store
@using eShop.Infrastructure.Services
@using eShop.Infrastructure.StateContainers
@using Cart = eShop.Domain.Models.Store.CartStore
@inherits LayoutComponentBase

@implements IDisposable

@inject ITokenProvider TokenProvider
@inject ILocalDataAccessor LocalDataAccessor
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationsStateContainer NotificationsStateContainer
@inject INotificationService NotificationService 
@inject ICartService CartService
@inject IFavoritesService FavoritesService
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inject IStoreService StoreService
@inject IAuthenticationService authenticationService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authenticationState
@inject IConfiguration Configuration

@using Severity = MudBlazor.Severity

<MudThemeProvider IsDarkMode/>
<MudDialogProvider/>
<MudSnackbarProvider/>
<MudPopoverProvider/>

<MudLayout Style="height:100vh">
    <MudAppBar Style="height:70px;" Class="align-content-center" Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
        <MudText Align="Align.Center" Typo="Typo.h5" Class="ml-3 cursor-pointer" @onclick="@(() => NavigationManager.NavigateTo("/products"))">eShop</MudText>
        <MudSpacer/>
        <SearchField/>
        <MudSpacer/>
        <AuthorizeView>
            <NotAuthorized>
                <MudButton StartIcon="@Icons.Material.Filled.Login"
                           Color="Color.Primary" Href="/account/login">
                    Log In
                </MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.AppRegistration"
                           Color="Color.Primary" Href="/account/register" Class="ml-3">
                    Register
                </MudButton>
            </NotAuthorized>
            <Authorized>
                <MudMenu Style="margin-top:6px" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.BottomLeft" ActivationEvent="MouseEvent.LeftClick">
                    <ActivatorContent>
                        @if (notificationsCount == 0)
                        {
                            <MudAvatar>
                                <MudImage Alt="avatar" Src="@(string.IsNullOrEmpty(avatarUri) ? Configuration["DefaultAvatar"]! : avatarUri)"/>
                            </MudAvatar>
                        }
                        else
                        {
                            <MudBadge Style="margin-top:6px" Max="99" @bind-content="notificationsCount" Overlap Color="Color.Secondary">
                                <MudAvatar>
                                    <MudImage Alt="avatar" Src="@(string.IsNullOrEmpty(avatarUri) ? Configuration["DefaultAvatar"]! : avatarUri)"/>
                                </MudAvatar>
                            </MudBadge>
                        }
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem>
                            <MudButton StartIcon="@Icons.Material.Filled.ShoppingCart" Color="Color.Primary" OnClick="@(() => RedirectTo("/cart"))">
                                Your Cart
                            </MudButton>
                        </MudMenuItem>
                        <MudMenuItem>
                            <MudButton StartIcon="@Icons.Material.Filled.ManageAccounts" Color="Color.Primary" OnClick="@(() => RedirectTo("/profile"))">
                                Profile
                            </MudButton>
                        </MudMenuItem>
                        <MudMenuItem>
                            <MudButton StartIcon="@Icons.Material.Filled.Settings" Color="Color.Primary" OnClick="@(() => RedirectTo("/setting"))">
                                Settings
                            </MudButton>
                        </MudMenuItem>
                        <MudDivider/>
                        <MudMenuItem>
                            <MudButton StartIcon="@Icons.Material.Filled.Logout" Color="Color.Primary" OnClick="LogoutClick">
                                Log Out
                            </MudButton>
                        </MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </Authorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer Style="top:70px" @bind-Open="drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu/>
    </MudDrawer>
    <MudMainContent Style="height:100%">
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="py-5 position-relative" Style="height:100%">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    [CascadingParameter] Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private bool drawerOpen = true;
    private string pageTitle = string.Empty;
    private string avatarUri = string.Empty;
    private UserStore user = new();
    private int notificationsCount = 0;

    void DrawerToggle()
    {
        drawerOpen = !drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        NotificationsStateContainer.OnNotificationsChanged += NotificationCountChanged;

        var user = await LocalDataAccessor.ReadUserDataAsync();

        if (user is not null)
        {
            await GetAvatarAsync();
            await EnsureCartAsync();
            await EnsureFavoritesAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var state = await AuthenticationStateTask!;
            if (state.User.Identity is null || !state.User.Identity!.IsAuthenticated)
            {
                var token = await TokenProvider.GetTokenAsync();
                await (AuthenticationStateProvider as ApplicationAuthenticationStateProvider)!.UpdateAuthenticationState(token);
            }
        }

        var user = await LocalDataAccessor.ReadUserDataAsync();

        if (user is not null)
        {
            await EnsureCartAsync();
            await EnsureFavoritesAsync();
            notificationsCount = await NotificationService.GetNotificationsCountAsync();
        }
    }

    private string GetPageTitle()
    {
        var builder = new StringBuilder(NavigationManager.Uri);
        builder.Replace(NavigationManager.BaseUri, string.Empty);
        var title = builder.ToString().Split('/').Last();
        var formatedTitle = new StringBuilder(title);
        formatedTitle.Replace(title[0], char.ToUpper(title[0]), 0, 1);
        formatedTitle.Replace("-", " ");
        return formatedTitle.ToString();
    }

    private async Task EnsureCartAsync()
    {
        if (!await LocalDataAccessor.IsCartExistsAsync())
        {
            var userData = await LocalDataAccessor.ReadUserDataAsync();
            var response = await CartService.GetCartAsync(Guid.Parse(user.UserId));

            if (response.Success)
            {
                var data = JsonConvert.DeserializeObject<CartDto>(response.Result!.ToString()!);
                await LocalDataAccessor.CreateCartAsync(CartMapper.ToCartModel(data!));
            }
            else
            {
                Snackbar.Add(response.Message, Severity.Error);
            }
        }
    }

    private async Task EnsureFavoritesAsync()
    {
        if (!await LocalDataAccessor.IsFavoritesExistsAsync())
        {
            var userData = await LocalDataAccessor.ReadUserDataAsync();
            var response = await FavoritesService.GetFavoritesAsync(Guid.Parse(userData.UserId));
            if (response.Success)
            {
                var data = JsonConvert.DeserializeObject<FavoritesDto>(response.Result!.ToString()!);
                await LocalDataAccessor.CreateFavoritesAsync(FavoritesMapper.ToFavoritesModel(data!));
            }
            else
            {
                Snackbar.Add(response.Message, Severity.Error);
            }
        }
    }

    private async Task GetAvatarAsync()
    {
        user = await LocalDataAccessor.ReadUserDataAsync();

        if (user is not null)
        {
            avatarUri = await LocalDataAccessor.ReadAvatarLinkAsync();

            if (string.IsNullOrEmpty(avatarUri))
            {
                var response = await StoreService.GetUserAvatarAsync(user.UserId);

                if (response.Success)
                {
                    avatarUri = response!.Result?.ToString() ?? Configuration["Configuration:General:DefaultValues:DefaultAvatar"]!;
                }
                else
                {
                    Snackbar.Add(response.Message, Severity.Error);
                    avatarUri = Configuration["Configuration:General:DefaultValues:DefaultAvatar"]!;
                }
            }
        }
    }

    private async Task LogoutClick()
    {
        await (authenticationState as ApplicationAuthenticationStateProvider)!.LogOutAsync();
        Snackbar.Add("Successfully logged out.", MudBlazor.Severity.Success);
        NavigationManager.NavigateTo("/account/login");
    }

    private void RedirectTo(string link)
    {
        NavigationManager.NavigateTo(link);
        StateHasChanged();
    }

    private async Task NotificationCountChanged()
    {
        notificationsCount = await NotificationService.GetNotificationsCountAsync();
        StateHasChanged();
    }

    public void Dispose()
    {
        NotificationsStateContainer.OnNotificationsChanged -= NotificationCountChanged;
    }

}