@inject IAuthenticationService authenticationService
@inject NavigationManager navigationManger
@inject AuthenticationStateProvider authenticationState
@inject ITokenProvider tokenProvider
@inject ISnackbar Snackbar
@inject ILocalDataAccessor LocalDataAccessor
@inject IConfiguration Configuration
@inject IStoreService StoreService

<AuthorizeView>
    <NotAuthorized>
        <MudButton StartIcon="@Icons.Material.Filled.Login"
                   Color="Color.Primary" Href="/account/login">Log In</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.AppRegistration"
                   Color="Color.Primary" Href="/account/register" Class="ml-3">Register</MudButton>
    </NotAuthorized>
    <Authorized>
        <MudMenu AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.BottomLeft" ActivationEvent="MouseEvent.LeftClick">
            <ActivatorContent>
                <MudAvatar>
                    <MudImage Alt="avatar" Src="@(string.IsNullOrEmpty(AvatarUri) ? Configuration["DefaultAvatar"]! : AvatarUri)" />
                </MudAvatar>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem>
                    <MudButton StartIcon="@Icons.Material.Filled.ShoppingCart" Color="Color.Primary" OnClick="@(() => RedirectTo("/cart"))">
                        Your Cart
                    </MudButton>
                </MudMenuItem>
                <MudMenuItem>
                    <MudButton StartIcon="@Icons.Material.Filled.ManageAccounts" Color="Color.Primary" OnClick="@(() => RedirectTo("/profile"))">
                        Profile
                    </MudButton>
                </MudMenuItem>
                <MudMenuItem>
                    <MudButton StartIcon="@Icons.Material.Filled.Settings" Color="Color.Primary" OnClick="@(() => RedirectTo("/setting"))">
                        Settings
                    </MudButton>
                </MudMenuItem>
                <MudDivider />
                <MudMenuItem>
                    <MudButton StartIcon="@Icons.Material.Filled.Logout" Color="Color.Primary" OnClick="LogoutClick">
                        Log Out
                    </MudButton>
                </MudMenuItem>
            </ChildContent>
        </MudMenu>
    </Authorized>
</AuthorizeView>

@code {
    private string AvatarUri = string.Empty;
    private UserDataModel User = new();

    protected override async Task OnInitializedAsync()
    {
        User = await LocalDataAccessor.ReadUserDataAsync();
        if (User is not null)
        {
            var link = await LocalDataAccessor.ReadAvatarLinkAsync();

            if (string.IsNullOrEmpty(link))
            {
                link = await StoreService.GetUserAvatarAsync(User!.UserId);

                if (string.IsNullOrEmpty(link))
                {
                    AvatarUri = Configuration["DefaultAvatar"]!;
                }

                AvatarUri = link;
            }
            else
            {
                AvatarUri = link;
            }
        }
    }

    private async Task LogoutClick()
    {
        await (authenticationState as ApplicationAuthenticationStateProvider)!.LogOutAsync();
        Snackbar.Add("Successfully logged out.", MudBlazor.Severity.Success);
        navigationManger.NavigateTo("/account/login");
    }

    private void RedirectTo(string link)
    {
        navigationManger.NavigateTo(link);
        StateHasChanged();
    }
}
