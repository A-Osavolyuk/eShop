@page "/account/profile/change-password"
@using eShop.Application.Validation.Auth

@inject NavigationManager NavigationManager
@inject ILocalDataAccessor LocalDataAccessor
@inject IAuthenticationService AuthService
@inject ChangePasswordValidator Validator
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ITokenProvider TokenProvider

<PageTitle>Change password</PageTitle>

<MudGrid Justify="Justify.Center">
    <MudItem xs="4">
        <MudPaper Outlined Class="pa-5">
            <MudGrid>
                <MudItem xs="1">
                    <MudIconButton @onclick="@(() => NavigationManager.NavigateTo("/account/profile"))" Icon="@Icons.Material.Filled.ArrowBack" />
                </MudItem>
                <MudItem xs="11" Class="m-auto">
                    <MudText Typo="Typo.h6"> Change password </MudText>
                </MudItem>
            </MudGrid>
            <MudDivider />
            <MudGrid Class="mt-3" Justify="Justify.Center">
                <MudItem xs="12">
                    <EditForm Model="Request" FormName="change-password-form" OnValidSubmit="OnValidSubmit">
                        <FluentValidationValidator Validator="Validator" />
                        <MudTextField Immediate Clearable Counter="32" MaxLength="32" For="@(() => Request.OldPassword)" Label="Current password" @bind-Value="Request.OldPassword" Variant="Variant.Outlined" />
                        <MudTextField Immediate Clearable Counter="32" MaxLength="32" For="@(() => Request.NewPassword)" Label="Current password" @bind-Value="Request.NewPassword" Variant="Variant.Outlined" />
                        <MudTextField Immediate Clearable Counter="32" MaxLength="32" For="@(() => Request.ConfirmNewPassword)" Label="Current password" @bind-Value="Request.ConfirmNewPassword" Variant="Variant.Outlined" />
                        <MudButton Class="mt-3" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Success" EndIcon="@Icons.Material.Filled.Save">Save changes</MudButton>
                    </EditForm>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private ChangePasswordRequest Request = new();
    private UserDataModel User = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            User = await LocalDataAccessor.ReadUserDataAsync();
            Request = new() { Email = User.Email };
            StateHasChanged();
        }
    }

    private async Task OnValidSubmit()
    {
        var response = await AuthService.ChangePasswordAsync(Request);

        if (response.IsSucceeded)
        {
            var data = JsonConvert.DeserializeObject<ChangePasswordResponse>(response.Result!.ToString()!);
            NavigationManager.NavigateTo("/account/profile", true);
            Snackbar.Add(data!.Message, MudBlazor.Severity.Success);
        }
        else
        {
            Snackbar.Add(response.ErrorMessage, MudBlazor.Severity.Error);
        }
    }
}
