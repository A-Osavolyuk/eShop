@page "/profile/change-username"
@using eShop.Domain.Interfaces.Client
@using eShop.Domain.Requests.Api.Auth
@using eShop.Domain.Responses.Api.Auth
@inherits PageBase

@inject IAuthenticationService AuthService
@inject IProfileService ProfileService
@inject UserNameValidator Validator
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ITokenProvider TokenProvider
@inject IUserStorage UserStorage

<Title Text="Change username" />

<AuthorizeView Roles="User">
    <Authorized>
        <MudGrid Justify="Justify.Center">
            <MudItem xs="4">
                <MudPaper Outlined Class="pa-5 position-relative">
                    <MudGrid>
                        <MudIconButton Class="position-absolute" Style="top:15px; left:5%" @onclick="@(() => NavigationManager.NavigateTo("/profile"))" Icon="@Icons.Material.Filled.ArrowBack" />
                        <MudItem xs="12" Class="m-auto">
                            <MudText Align="Align.Center" Typo="Typo.h6"> Change username </MudText>
                        </MudItem>
                    </MudGrid>
                    <MudGrid Justify="Justify.Center">
                        <MudItem xs="12">
                            <EditForm Context="formcontext" Model="Request" FormName="change-username-form" OnValidSubmit="OnValidSubmit">
                                <FluentValidationValidator Validator="Validator" />
                                <MudTextField Immediate Clearable Counter="18" MaxLength="18" For="@(() => Request.UserName)" Label="Username" @bind-Value="Request.UserName" Variant="Variant.Outlined" />
                                <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Success" EndIcon="@Icons.Material.Filled.Save">Save changes</MudButton>
                            </EditForm>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </Authorized>
    <NotAuthorized>
        <AuthenticationManager />
    </NotAuthorized>
</AuthorizeView>

@code {
    private ChangeUserNameRequest Request = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var accountData = await UserStorage.GetAccountDataAsync();
            Request = new() { Email = accountData!.Email, UserName = accountData.UserName };
            StateHasChanged();
        }
    }

    private async Task OnValidSubmit()
    {
        var response = await ProfileService.ChangeUserNameAsync(Request);

        if (response.Success)
        {
            var data = JsonConvert.DeserializeObject<ChangeUserNameResponse>(response.Result!.ToString()!);
            await (AuthenticationStateProvider as ApplicationAuthenticationStateProvider)!.UpdateAuthenticationStateAsync(data!.RefreshToken);
            NavigationManager.NavigateTo("/account/profile", true);
            Snackbar.Add(data!.Message, MudBlazor.Severity.Success);
        }
        else
        {
            Snackbar.Add(response.Message, MudBlazor.Severity.Error);
        }
    }
}
