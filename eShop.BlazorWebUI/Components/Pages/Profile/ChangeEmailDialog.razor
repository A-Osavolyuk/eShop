@inject IAuthenticationService AuthenticationService
@inject ISnackbar Snackbar
@inject IValidator<ChangeEmailRequest> Validator

<MudDialog>
    <DialogContent>
            <EditForm FormName="change-email-form" Model="Model" OnValidSubmit="Submit">
                <FluentValidationValidator Validator="Validator" />
                <MudTextField Class="mb-3" @bind-Value=Model.NewEmail For="(() => Model.NewEmail)" Variant="Variant.Outlined" Label="New email"/>

                    <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="Cancel">Cancel</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Submit</MudButton>
            </EditForm>
    </DialogContent>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public ChangeEmailRequest Model { get; set; } = new();

    private async Task Submit()
    {
        var result = await AuthenticationService.RequestChangeEmailAsync(Model);

        if (result.IsSucceeded)
        {
            Snackbar.Add(result.ResultMessage, MudBlazor.Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            Snackbar.Add(result.ErrorMessage, MudBlazor.Severity.Error);
            MudDialog.Close(DialogResult.Cancel());
        }
    }
    void Cancel() => MudDialog.Cancel();
}
