@page "/profile"

@inject IAuthenticationService AuthenticationService

<PageTitle>Profile</PageTitle>

<AuthorizeView>
    <Authorized>
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true">
            <MudTabPanel Text="Personal Information">
                <MudGrid>
                    <MudItem xs="12">
                        <MudPaper Class="pa-3">
                            <MudGrid Justify="Justify.Center">
                                <MudItem xs="12" xl="12">
                                    <MainData Model="MainDataModel" />
                                </MudItem>

                                <MudItem xs="12" xl="12">
                                    <ContactData Model="ContactDataModel" />
                                </MudItem>
                            </MudGrid>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
            <MudTabPanel Text="Security">
                <MudText>Content Three</MudText>
            </MudTabPanel>
            <MudTabPanel Text="Settings" Disabled="true">
                <MudText>Content Disabled</MudText>
            </MudTabPanel>
        </MudTabs>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private MainDataModel MainDataModel { get; set; } = new();
    private ContactDataModel ContactDataModel { get; set; } = new();
    private PersonalData PersonalData { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        PersonalData = await GetPersonalData();
        MainDataModel = await SetMainData();
        ContactDataModel = await SetContactData();
    }

    private async Task<MainDataModel> SetMainData()
    {
        var userName = (await AuthenticationStateTask!).User.Identity!.Name;

        var data = new MainDataModel()
        {
            UserName = userName!,
            DateOfBirth = PersonalData.DateOfBirth,
            FullName = $"{PersonalData.FirstName} {PersonalData.LastName}",
            Gender = PersonalData.Gender
        };

        return data;
    }

    private async Task<ContactDataModel> SetContactData()
    {
        var state = await AuthenticationStateTask!;
        var email = state.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Email)!.Value!;
        var data = new ContactDataModel()
        {
            Email = email,
            PhoneNumber = PersonalData.PhoneNumber
        };

        return data;
    }

    private async Task<PersonalData> GetPersonalData()
    {
        var state = await AuthenticationStateTask!;
        var id = state.User.Claims.FirstOrDefault(x => x.Type == CustomClaimTypes.Id)!.Value!;
        var result = await AuthenticationService.GetPersonalDataAsync(id);
        if (result.IsSucceeded)
        {
            var data = JsonConvert.DeserializeObject<PersonalData>(result.Result!.ToString()!)!;
            return data;
        }
        return new()
        {
            FirstName = "None",
            LastName = "None",
            Gender = "None",
            PhoneNumber = "None",
            DateOfBirth = new(2000, 1, 1)
        };
    }
}
