@page "/profile"
@using eShop.Domain.Models.Store
@using eShop.Domain.Responses.AuthApi.Auth
@using Severity = MudBlazor.Severity
@inherits PageBase

@inject IAuthenticationService AuthService
@inject IConfiguration Configuration
@inject IStoreService StoreService

<Title Text="Profile" />

<AuthorizeView Roles="User">
    <Authorized>
        <MudGrid Justify="Justify.Center">
            <MudItem xs="8">
                <MudPaper Class="pa-3" Outlined>
                    @if (userStore is null)
                    {
                        <MudText Typo="Typo.h3">Loading...</MudText>
                    }
                    else
                    {
                        <MudGrid Justify="Justify.Center">
                            <MudItem xs="3">
                                <MudPaper Class="pa-1" Outlined>
                                    <MudImage ObjectFit="ObjectFit.Fill" Class="w-100 h-100" Alt="user-avatar" Src="@avatarUri" />
                                </MudPaper>
                                <MudGrid Justify="Justify.Center">
                                    <MudItem Class="mt-1" xs="12">
                                        <MudStack Spacing="1">
                                            <MudButton Disabled="@(avatarUri == Configuration["DefaultAvatar"] ? true : false)" OnClick="RemoveAvatar"
                                                       Variant="Variant.Filled" FullWidth Color="Color.Error" ButtonType="ButtonType.Button" EndIcon="@Icons.Material.Filled.Delete">Remove avatar</MudButton>
                                            <MudButton Variant="Variant.Filled" FullWidth Color="Color.Primary" OnClick="@(() => NavigationManager.NavigateTo("/profile/change-avatar"))"
                                                       ButtonType="ButtonType.Button" EndIcon="@Icons.Material.Filled.AddAPhoto">Change avatar</MudButton>
                                        </MudStack>
                                    </MudItem>
                                </MudGrid>
                            </MudItem>
                            <MudItem xs="9">
                                <MudPaper Outlined Class="pa-3 mb-3">
                                    <MudText Typo="Typo.h6">Account Information</MudText>
                                    <MudGrid Spacing="3" Class="mt-3">
                                        <ProfileField Divided Label="User name" Text="@userStore.UserName" HasButton
                                                      Tooltip="Change user name" OnEditClick="@(() => NavigationManager.NavigateTo("/profile/change-username"))" />
                                        <ProfileField Divided Label="Email address" Text="@userStore.Email" HasButton
                                                      Tooltip="Change email address" OnEditClick="@(() => NavigationManager.NavigateTo("/profile/change-email"))" />
                                        <ProfileField Divided Label="Phone number" Text="@userStore.PhoneNumber" HasButton
                                                      Tooltip="Change phone number" OnEditClick="@(() => NavigationManager.NavigateTo("/profile/change-phone-number"))" />
                                    </MudGrid>
                                </MudPaper>

                                <MudPaper Outlined Class="pa-3 mb-3">
                                    <MudGrid Spacing="3">
                                        <MudItem xs="11">
                                            <MudText Typo="Typo.h6">Personal Information</MudText>
                                        </MudItem>
                                        <MudItem xs="1">
                                            <MudTooltip Text="Change perosnal data" Color="Color.Primary">
                                                <MudIconButton Variant="Variant.Filled" ButtonType="ButtonType.Button" Color="Color.Primary" Icon="@Icons.Material.Filled.EditNote"
                                                               OnClick="@(() => NavigationManager.NavigateTo("/profile/change-personal-data"))" />
                                            </MudTooltip>
                                        </MudItem>
                                    </MudGrid>
                                    <MudGrid Spacing="3" Class="mt-3">
                                        <ProfileField Divided Label="Full Name" Text="@($"{personalDataModel.FirstName} {personalDataModel.LastName}")" />
                                        <ProfileField Divided Label="Date of birth" Text="@(personalDataModel.DateOfBirth.ToLongDateString())" />
                                        <ProfileField Divided Label="Gender" Text="@personalDataModel.Gender" />
                                    </MudGrid>
                                </MudPaper>
                                <MudPaper Outlined Class="pa-3">
                                    <MudGrid>
                                        <MudItem xs="12">
                                            <MudText Typo="Typo.h6">Security Information</MudText>
                                        </MudItem>
                                    </MudGrid>
                                    <MudGrid Spacing="3" Class="mt-3">
                                        <MudDivider />
                                        <MudItem xs="3" Class="m-auto">
                                            <MudText Typo="Typo.body2">Two factor authentication</MudText>
                                        </MudItem>
                                        <MudItem xs="8" Class="m-auto">
                                            <MudText Color="@(securityData.TwoFactorAuthenticationState ? Color.Success : Color.Error)"
                                                     Typo="Typo.body2">@(securityData.TwoFactorAuthenticationState ? "Enabled" : "Disabled")</MudText>
                                        </MudItem>
                                        <MudItem xs="1">
                                            <MudTooltip Text="Change two factor authentication state" Color="Color.Primary">
                                                <MudIconButton ButtonType="ButtonType.Button" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled"
                                                               OnClick="ChangeTwoFactorAuthenticationState" />
                                            </MudTooltip>
                                        </MudItem>
                                        <ProfileField Divided Label="Password" Text="@($"Last updated at {securityData.PasswordUpdatedDate.ToLongDateString()}")"
                                                      HasButton Tooltip="Change password" OnEditClick="@(() => NavigationManager.NavigateTo("/profile/change-password"))" />
                                    </MudGrid>
                                </MudPaper>
                            </MudItem>
                        </MudGrid>
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>
    </Authorized>
    <NotAuthorized>
        <AuthenticationManager />
    </NotAuthorized>
</AuthorizeView>

@code {
    private UserStore userStore = null!;
    private PersonalDataModel personalDataModel = null!;
    private SecurityData securityData = null!;
    private string avatarUri = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        userStore = await LocalDataAccessor.ReadUserDataAsync();
        await GetPersonalData();
        await GetSecurityData();
        await GetAvatar();

        StateHasChanged();

        await base.OnInitializedAsync();
    }

    private async Task GetPersonalData()
    {
        personalDataModel = await LocalDataAccessor.ReadPersonalDataAsync();

        if (string.IsNullOrEmpty(personalDataModel.FirstName) || string.IsNullOrEmpty(personalDataModel.LastName) || string.IsNullOrEmpty(personalDataModel.Gender))
        {
            var response = await AuthService.GetPersonalDataAsync(userStore!.Email);

            if (response.Success)
            {
                var data = JsonConvert.DeserializeObject<PersonalDataResponse>(response.Result!.ToString()!);

                personalDataModel = new()
                    {
                        FirstName = data.FirstName,
                        LastName = data.LastName,
                        Gender = data.Gender,
                        DateOfBirth = data.DateOfBirth
                    };

                await LocalDataAccessor.WritePersonalDataAsync(personalDataModel);
            }
            else
            {
                Snackbar.Add(response.Message, MudBlazor.Severity.Error);
            }
        }
    }

    private async Task GetSecurityData()
    {
        securityData = await LocalDataAccessor.ReadSecurityDataAsync();

        if (securityData.PasswordUpdatedDate == new DateTime(1, 1, 1))
        {
            var response = await AuthService.GetTwoFactorStateAsync(userStore.Email);

            if (response.Success)
            {
                var data = JsonConvert.DeserializeObject<TwoFactorAuthenticationStateResponse>(response.Result!.ToString()!);

                securityData = new()
                    {
                        PasswordUpdatedDate = new(2024, 1, 1),
                        TwoFactorAuthenticationState = data!.State.Enabled
                    };

                await LocalDataAccessor.WriteSecurityDataAsync(securityData);
            }
            else
            {
                Snackbar.Add(response.Message, MudBlazor.Severity.Error);
            }
        }
    }

    private async Task GetAvatar()
    {
        avatarUri = await LocalDataAccessor.ReadAvatarLinkAsync();

        if (string.IsNullOrEmpty(avatarUri))
        {
            var response = await StoreService.GetUserAvatarAsync(userStore.UserId);

            if (response.Success)
            {
                avatarUri = response!.Result?.ToString() ?? Configuration["DefaultAvatar"]!;
            }
            else
            {
                Snackbar.Add(response.Message, Severity.Error);
                avatarUri = Configuration["DefaultAvatar"]!;
            }
        }
    }

    private async Task ChangeTwoFactorAuthenticationState()
    {
        var response = await AuthService.ChangeTwoFactorAuthenticationStateAsync(new() { Email = userStore.Email });

        if (response.Success)
        {
            var data = JsonConvert.DeserializeObject<ChangeTwoFactorAuthenticationResponse>(response.Result!.ToString()!);
            securityData.TwoFactorAuthenticationState = data!.TwoFactorAuthenticationState;
            await LocalDataAccessor.WriteSecurityDataAsync(securityData);
            StateHasChanged();
        }
        else
        {
            Snackbar.Add(response.Message, MudBlazor.Severity.Error);
        }
    }

    private async Task RemoveAvatar()
    {
        avatarUri = Configuration["DefaultAvatar"]!;
        await StoreService.RemoveUserAvatarAsync(userStore.UserId);
        await LocalDataAccessor.RemoveAvatarLinkAsync();
        StateHasChanged();
    }
}
