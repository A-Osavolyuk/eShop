@page "/profile/user-data"
@using eShop.Domain.DTOs.Responses

@inject IAuthenticationService AuthenticationService
@inject ISnackbar SnackbarService
@inject IDialogService DialogService
@inject ITokenProvider TokenProvider
@inject IMapper mapper
@inject IValidator<ChangePersonalDataRequestDto> Validator
@inject NavigationManager NavigationManager


@layout ProfileLayout

<PageTitle>User Data</PageTitle>

@if (!ShowForm)
{
    <AuthorizeView Context="authContext">
        <Authorized>
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Outlined Class="pa-3">
                        <LabeledText Label="First Name" TextContent="@ShowModel.FirstName" />
                        <LabeledText Label="Last Name" TextContent="@ShowModel.LastName" />
                        <LabeledText Label="Middle Name" TextContent="@ShowModel.MiddleName" />
                        <LabeledText Label="Gender" TextContent="@ShowModel.Gender" />
                        <LabeledText Label="Date of Birth" TextContent="@(ShowModel.DateOfBirth.ToLongDateString())" />
                        <LabeledText Label="Phone Number" TextContent="@ShowModel.PhoneNumber" />

                        <MudGrid>
                            <MudItem xs="12">
                                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary"
                                           Size="Size.Large" StartIcon="@Icons.Material.Filled.ChangeCircle" OnClick="ShowChangeDataForm">
                                    Change personal data
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </Authorized>
    </AuthorizeView>
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-3" Outlined>
                <EditForm Context="FormContext" Model="FormModel" FormName="change-personal-data-form" OnValidSubmit="@(async () => await OnSaveChanges())">
                    <FluentValidationValidator Validator="Validator" />

                    <MudTextField @bind-Value="FormModel.FirstName" For="(() => FormModel.FirstName)" Label="First Name" Variant="Variant.Outlined" />
                    <MudTextField @bind-Value="FormModel.LastName" For="(() => FormModel.LastName)" Label="Last Name" Variant="Variant.Outlined" />
                    <MudTextField @bind-Value="FormModel.MiddleName" For="(() => FormModel.MiddleName)" Label="Middle Name" Variant="Variant.Outlined" />
                    <MudDatePicker Date="FormModel.DateOfBirth" @ref="DatePicker" Label="Date of birth" Variant="Variant.Outlined" />
                    <MudSelect @bind-Value="FormModel.Gender" For="(() => FormModel.Gender)" Label="Gender" Variant="Variant.Outlined">
                        <MudSelectItem T="string"> Choose your gender </MudSelectItem>
                        <MudSelectItem T="string" Value="@("Male")"> Male </MudSelectItem>
                        <MudSelectItem T="string" Value="@("Female")"> Female </MudSelectItem>
                    </MudSelect>
                    <MudTextField @bind-Value="FormModel.PhoneNumber" For="(() => FormModel.PhoneNumber)" Label="Phone number" Variant="Variant.Outlined" />

                    <MudButton Class="mt-3" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Save">Save</MudButton>
                    <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Error"
                               StartIcon="@Icons.Material.Filled.Cancel" OnClick="OnCancel">Cancel</MudButton>
                </EditForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private PersonalDataDto ShowModel { get; set; } = new();
    private MudDatePicker? DatePicker { get; set; }
    private ChangePersonalDataRequestDto FormModel { get; set; } = new();
    private bool ShowForm { get; set; } = false;

    override protected async Task OnInitializedAsync()
    {
        await RefreshData();
        FormModel = mapper.Map<ChangePersonalDataRequestDto>(ShowModel);
        DatePicker = new();
    }

    void ShowChangeDataForm() => ShowForm = true;
    void OnCancel() => ShowForm = false;

    async Task OnSaveChanges()
    {
        var state = await AuthenticationStateTask!;
        FormModel.DateOfBirth = DatePicker!.Date!.Value;

        var id = state.User.Claims.FirstOrDefault(c => c.Type == CustomClaimTypes.Id)!.Value;
        var result = await AuthenticationService.ChangePersonalDataAsync(id, FormModel);

        if (result.IsSucceeded)
        {
            SnackbarService.Add(result.ResultMessage, MudBlazor.Severity.Success);
            await RefreshData();
            ShowForm = false;
        }
        else
        {
            SnackbarService.Add(result.ErrorMessage, MudBlazor.Severity.Error);
        }

    }

    private async ValueTask RefreshData()
    {
        var state = await AuthenticationStateTask;
        var result = await AuthenticationService.
            GetPersonalDataAsync(state.User.Claims.FirstOrDefault(x => x.Type == CustomClaimTypes.Id)!.Value);

        if (result.IsSucceeded)
        {
            ShowModel = JsonConvert.DeserializeObject<PersonalDataDto>(result.Result.ToString()!)!;
        }
        else
        {
            SnackbarService.Add(result.ErrorMessage, MudBlazor.Severity.Error);
        }
    }
}
