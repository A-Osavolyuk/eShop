@page "/profile/change-personal-data"

@using eShop.Application.Mapping
@using eShop.Domain.Requests.AuthApi.Auth
@using eShop.Domain.Responses.AuthApi.Auth
@inherits PageBase

@inject IAuthenticationService AuthService
@inject PersonalDataValidator Validator

<Title Text="Change personal data" />

<AuthorizeView Roles="User">
    <Authorized>
        <MudGrid Justify="Justify.Center">
            <MudItem xs="4">
                <MudPaper Outlined Class="pa-5 position-relative">
                    <MudGrid>
                        <MudIconButton Class="position-absolute" Style="top:15px; left:5%" @onclick="@(() => NavigationManager.NavigateTo("/profile"))" Icon="@Icons.Material.Filled.ArrowBack" />
                        <MudItem xs="12" Class="m-auto">
                            <MudText Align="Align.Center" Typo="Typo.h6"> Change personal data </MudText>
                        </MudItem>
                    </MudGrid>
                    <MudGrid Justify="Justify.Center">
                        <MudItem xs="12">
                            <EditForm Context="formcontext" Model="Request" FormName="change-personal-data-form" OnValidSubmit="OnValidSubmit">
                                <FluentValidationValidator Validator="Validator" />
                                <MudTextField Immediate Clearable Counter="32" MaxLength="32" For="@(() => Request.FirstName)" Label="First name" @bind-Value="Request.FirstName" Variant="Variant.Outlined" />
                                <MudTextField Immediate Clearable Counter="32" MaxLength="32" For="@(() => Request.LastName)" Label="Last name" @bind-Value="Request.LastName" Variant="Variant.Outlined" />
                                <MudTextField Immediate Clearable Counter="32" MaxLength="32" For="@(() => Request.Gender)" Label="Gender" @bind-Value="Request.Gender" Variant="Variant.Outlined" />
                                <MudDatePicker @ref="DatePicker" For="@(() => Request.DateOfBirth)" Label="Date of birth" @bind-Date="Request.DateOfBirth" Variant="Variant.Outlined" />
                                <MudButton Class="mt-3" Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Success" EndIcon="@Icons.Material.Filled.Save">Save changes</MudButton>
                            </EditForm>
                        </MudItem>
                    </MudGrid>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </Authorized>
    <NotAuthorized>
        <AuthenticationManager />
    </NotAuthorized>
</AuthorizeView>

@code {
    private ChangePersonalDataRequest Request = new();
    private UserDataStoreModel User = new();
    private MudDatePicker DatePicker = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var personalDataModel = await LocalDataAccessor.ReadPersonalDataAsync();
            User = await LocalDataAccessor.ReadUserDataAsync();

            if (personalDataModel is not null)
            {
                Request = PersonalDataMapper.ToChangePersonalDataRequest(personalDataModel) with { Email = User.Email };
            }

            StateHasChanged();
        }
    }

    private async Task OnValidSubmit()
    {
        var response = await AuthService.ChangePersonalDataAsync(Request);

        if (response.Success)
        {
            var data = JsonConvert.DeserializeObject<ChangePersonalDataResponse>(response.Result!.ToString()!);
            //TODO: personal data reload
            //await LocalDataAccessor.WritePersonalDataAsync(PersonalDataMapper.ToPersonalDataModel(data!));
            NavigationManager.NavigateTo("/account/profile", true);
            Snackbar.Add(response.Message, MudBlazor.Severity.Success);
        }
        else
        {
            Snackbar.Add(response.Message, MudBlazor.Severity.Error);
        }
    }
}
