@inject IDialogService DialogService
@inject IAuthenticationService AuthenticationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<MudCard Outlined>
    <MudCardHeader>
        <MudText Typo="Typo.h5">Main Information</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudDivider />
        <MudGrid Spacing="0">
            <MudItem xs="12" sm="3">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1"> User name </MudText>
            </MudItem>
            <MudItem xs="12" sm="9">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1"> @(string.IsNullOrEmpty(Model.UserName) ? "Loading..." : Model.UserName) </MudText>
            </MudItem>
        </MudGrid>
        <MudDivider />
        <MudGrid Spacing="0">
            <MudItem xs="12" sm="3">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1"> Full name </MudText>
            </MudItem>
            <MudItem xs="12" sm="9">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1"> @(string.IsNullOrEmpty(Model.FullName) ? "Loading..." : Model.FullName) </MudText>
            </MudItem>
        </MudGrid>
        <MudDivider />
        <MudGrid Spacing="0">
            <MudItem xs="12" sm="3">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1"> Date of birth </MudText>
            </MudItem>
            <MudItem xs="12" sm="9">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1">
                    @(string.IsNullOrEmpty(Model.DateOfBirth.ToLongDateString()) ? "Loading..." : Model.DateOfBirth.ToShortDateString())
                </MudText>
            </MudItem>
        </MudGrid>
        <MudDivider />
        <MudGrid Spacing="0">
            <MudItem xs="12" sm="3">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1"> Gender </MudText>
            </MudItem>
            <MudItem xs="12" sm="9">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1"> @(string.IsNullOrEmpty(Model.Gender) ? "Loading..." : Model.Gender) </MudText>
            </MudItem>
        </MudGrid>
        <MudDivider />
    </MudCardContent>
    <MudCardActions>
        <MudGrid Spacing="1">
            <MudItem xs="12" lg="3">
                <MudButton FullWidth OnClick="ChangeUserName" Color="Color.Primary" Variant="Variant.Filled">Change user name </MudButton>
            </MudItem>
            <MudItem xs="12" lg="3">
                <MudButton FullWidth OnClick="ChangePersonalData" Color="Color.Primary" Variant="Variant.Filled">Change personal data</MudButton>
            </MudItem>
        </MudGrid>
    </MudCardActions>
</MudCard>

@code {
    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private MainDataModel Model { get; set; } = new();
    private PersonalDataDto PersonalData { get; set; } = new();
    private string Email { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();

        var task = await AuthenticationStateTask;
        Email = task.User.Claims.ToList().FirstOrDefault(x => x.Type == ClaimTypes.Email)!.Value!;
    }

    private async Task RefreshData()
    {
        PersonalData = await GetPersonalData();
        Model = await SetMainData();
    }

    private async Task ChangeUserName()
    {
        var model = new ChangeUserNameRequest() { Email = Email };
        var parameters = new DialogParameters<ChangeUserNameDialog>() { { x => x.Model, model } };
        var options = new DialogOptions { CloseOnEscapeKey = true, ClassBackground = "blured", FullWidth = true };
        var dialog = await DialogService.ShowAsync<ChangeUserNameDialog>("Change User Name", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var token = result.Data.ToString();
            await (AuthenticationStateProvider as ApplicationAuthenticationStateProvider)!.UpdateAuthenticationState(token!);
            var task = await AuthenticationStateTask;
            Model.UserName = task.User.Identity!.Name!;
            NavigationManager.Refresh(true);
        }
    }

    private async Task ChangePersonalData()
    {
        var model = new ChangePersonalDataRequest()
        {
            FirstName = PersonalData.FirstName,
            LastName = PersonalData.LastName,
            DateOfBirth = PersonalData.DateOfBirth,
            Gender = PersonalData.Gender
        };
        var parameters = new DialogParameters<ChangePersonalDataDialog>();
        parameters.Add(x => x.Model, model);
        parameters.Add(x => x.Email, Email);
        var options = new DialogOptions { CloseOnEscapeKey = true, ClassBackground = "blured", FullWidth = true };
        var dialog = await DialogService.ShowAsync<ChangePersonalDataDialog>("Change Personal Data", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            NavigationManager.Refresh(true);
        }
    }

    private async Task<MainDataModel> SetMainData()
    {
        var userName = (await AuthenticationStateTask!).User.Identity!.Name;

        var data = new MainDataModel()
            {
                UserName = userName!,
                DateOfBirth = PersonalData.DateOfBirth,
                FullName = $"{PersonalData.FirstName} {PersonalData.LastName}",
                Gender = PersonalData.Gender
            };

        return data;
    }

    private async Task<PersonalDataDto> GetPersonalData()
    {
        var state = await AuthenticationStateTask!;
        var email = state.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Email)!.Value!;
        var result = await AuthenticationService.GetPersonalDataAsync(email);
        if (result.IsSucceeded)
        {
            var data = JsonConvert.DeserializeObject<PersonalDataDto>(result.Result!.ToString()!)!;
            return data;
        }
        return new()
        {
            FirstName = "None",
            LastName = "None",
            Gender = "None",
            DateOfBirth = new(2000, 1, 1)
        };
    }
}
