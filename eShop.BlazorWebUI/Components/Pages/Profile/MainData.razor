@inject IDialogService DialogService
@inject IAuthenticationService AuthenticationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ILocalDataAccessor LocalStorageAccessor
@inject IMapper Mapper

<MudCard Outlined>
    <MudCardHeader>
        <MudText Typo="Typo.h5">Main Information</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudDivider />
        <MudGrid Spacing="0">
            <MudItem xs="12" sm="3">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1"> User name </MudText>
            </MudItem>
            <MudItem xs="12" sm="9">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1"> @(string.IsNullOrEmpty(Model.UserName) ? "Loading..." : Model.UserName) </MudText>
            </MudItem>
        </MudGrid>
        <MudDivider />
        <MudGrid Spacing="0">
            <MudItem xs="12" sm="3">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1"> Full name </MudText>
            </MudItem>
            <MudItem xs="12" sm="9">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1"> @(string.IsNullOrEmpty(Model.FullName) ? "Loading..." : Model.FullName) </MudText>
            </MudItem>
        </MudGrid>
        <MudDivider />
        <MudGrid Spacing="0">
            <MudItem xs="12" sm="3">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1"> Date of birth </MudText>
            </MudItem>
            <MudItem xs="12" sm="9">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1">
                    @(string.IsNullOrEmpty(Model.DateOfBirth.ToLongDateString()) ? "Loading..." : Model.DateOfBirth.ToShortDateString())
                </MudText>
            </MudItem>
        </MudGrid>
        <MudDivider />
        <MudGrid Spacing="0">
            <MudItem xs="12" sm="3">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1"> Gender </MudText>
            </MudItem>
            <MudItem xs="12" sm="9">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1"> @(string.IsNullOrEmpty(Model.Gender) ? "Loading..." : Model.Gender) </MudText>
            </MudItem>
        </MudGrid>
        <MudDivider />
    </MudCardContent>
    <MudCardActions>
        <MudGrid Spacing="1">
            <MudItem xs="12" lg="3">
                <MudButton FullWidth OnClick="ChangeUserName" Color="Color.Primary" Variant="Variant.Filled">Change user name </MudButton>
            </MudItem>
            <MudItem xs="12" lg="3">
                <MudButton FullWidth OnClick="ChangePersonalData" Color="Color.Primary" Variant="Variant.Filled">Change personal data</MudButton>
            </MudItem>
        </MudGrid>
    </MudCardActions>
</MudCard>

@code {
    private MainDataModel Model { get; set; } = new();
    private PersonalDataDTO PersonalData { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        PersonalData = await GetPersonalData();
        Model = await SetMainData();
    }

    private async Task ChangeUserName()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, BackgroundClass = "blured", FullWidth = true };
        var dialog = await DialogService.ShowAsync<ChangeUserNameDialog>("Change User Name", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var token = result.Data.ToString();
            await (AuthenticationStateProvider as ApplicationAuthenticationStateProvider)!.UpdateAuthenticationState(token!);
            Model.UserName = await LocalStorageAccessor.GetUserNameAsync();
            NavigationManager.Refresh(true);
        }
    }

    private async Task ChangePersonalData()
    {
        var model = new ChangePersonalDataRequest()
        {
            FirstName = PersonalData.FirstName,
            LastName = PersonalData.LastName,
            DateOfBirth = PersonalData.DateOfBirth,
            Gender = PersonalData.Gender
        };
        var parameters = new DialogParameters<ChangePersonalDataDialog>();
        parameters.Add(x => x.Model, model);
        var options = new DialogOptions { CloseOnEscapeKey = true, BackgroundClass = "blured", FullWidth = true };
        var dialog = await DialogService.ShowAsync<ChangePersonalDataDialog>("Change Personal Data", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            NavigationManager.Refresh(true);
        }
    }

    private async Task<MainDataModel> SetMainData()
    {
        var data = new MainDataModel()
        {
            UserName = await LocalStorageAccessor.GetUserNameAsync(),
            DateOfBirth = PersonalData.DateOfBirth,
            FullName = $"{PersonalData.FirstName} {PersonalData.LastName}",
            Gender = PersonalData.Gender
        };

        return data;
    }

    private async Task<PersonalDataDTO> GetPersonalData()
    {
        var personalData = await LocalStorageAccessor.GetPersonalDataAsync();

        if (personalData is null)
        {
            var email = await LocalStorageAccessor.GetEmailAsync();
            var result = await AuthenticationService.GetPersonalDataAsync(email);
            if (result.IsSucceeded)
            {
                var response = JsonConvert.DeserializeObject<PersonalDataResponse>(result.Result!.ToString()!)!;
                var data = Mapper.Map<PersonalDataDTO>(response);
                await LocalStorageAccessor.SetPersonalDataAsync(data);

                return data;
            }
            return new()
            {
                FirstName = "None",
                LastName = "None",
                Gender = "None",
                DateOfBirth = new(2000, 1, 1)
            };
        }

        return personalData;
    }
}
