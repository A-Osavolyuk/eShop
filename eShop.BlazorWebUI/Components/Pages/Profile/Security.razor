@inject IAuthenticationService AuthenticationService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ILocalDataAccessor LocalDataAccessor

<MudCard Outlined>
    <MudCardHeader>
        <MudText Typo="Typo.h5"> Account Security </MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudDivider />
        <MudGrid Spacing="0">
            <MudItem xs="12" sm="3">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1"> Two Factor Authentication </MudText>
            </MudItem>
            <MudItem xs="12" sm="9">
                <MudText Class="mx-3 my-1" Color="@(TwoFactorState ? Color.Success : Color.Error)" 
                    Typo="Typo.subtitle1">@(TwoFactorState ? "Enabled" : "Disabled")</MudText>
            </MudItem>
        </MudGrid>
        <MudDivider />
    </MudCardContent>
    <MudCardActions>
        <MudGrid Spacing="1">
            <MudItem xs="12" lg="3">
                <MudButton FullWidth Color="Color.Primary" OnClick="ChangeState" Variant="Variant.Filled">@(!TwoFactorState ? "Enable" : "Disable") 2FA</MudButton>
            </MudItem>
            <MudItem xs="12" lg="3">
                <MudButton FullWidth Color="Color.Primary" OnClick="ChangePassword" Variant="Variant.Filled">Change Password</MudButton>
            </MudItem>
        </MudGrid>
    </MudCardActions>
</MudCard>

@code {
    private ChangePasswordRequest Request { get; set; } = new();
    private bool TwoFactorState { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var email = await LocalDataAccessor.GetEmailAsync();
            var result = await AuthenticationService.GetTwoFactorStateAsync(email);

            if (result.IsSucceeded)
            {
                var data = JsonConvert.DeserializeObject<TwoFactorAuthenticationStateResponse>(result.Result!.ToString()!);
                TwoFactorState = data!.TwoFactorAuthenticationState;
            }
            else
            {
                TwoFactorState = false;
                Snackbar.Add(result.ErrorMessage, MudBlazor.Severity.Error);
            }
        }

        StateHasChanged();
    }

    private async Task ChangeState()
    {
        var email = await LocalDataAccessor.GetEmailAsync();
        var result = await AuthenticationService.ChangeTwoFactorAuthenticationStateAsync(new() { Email = email });

        if (result.IsSucceeded)
        {
            Snackbar.Add(result.ResultMessage, MudBlazor.Severity.Success);
            TwoFactorState = !TwoFactorState;
        }
        else
            Snackbar.Add(result.ErrorMessage, MudBlazor.Severity.Error);
    }

    private async Task ChangePassword()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, ClassBackground = "blured", FullWidth = true };
        var dialog = await DialogService.ShowAsync<ChangePasswordDialog>("Change Password", options);
    }
}
