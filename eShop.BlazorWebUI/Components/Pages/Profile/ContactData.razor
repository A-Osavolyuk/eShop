@using eShop.Domain.DTOs.Responses
@inject IDialogService DialogService
@inject IAuthenticationService AuthenticationService

<MudCard Outlined Style="height:100%">
    <MudCardHeader>
        <MudText Typo="Typo.h5">Contact Information</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudDivider />
        <MudGrid Spacing="0">
            <MudItem xs="12" sm="3">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1"> Email </MudText>
            </MudItem>
            <MudItem xs="12" sm="9">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1"> @(string.IsNullOrEmpty(Model.Email) ? "Loading..." : Model.Email) </MudText>
            </MudItem>
        </MudGrid>
        <MudDivider />
        <MudGrid Spacing="0">
            <MudItem xs="12" sm="3">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1"> Phone Number </MudText>
            </MudItem>
            <MudItem xs="12" sm="9">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1"> @(string.IsNullOrEmpty(Model.PhoneNumber) ? "Loading..." : Model.PhoneNumber) </MudText>
            </MudItem>
        </MudGrid>
        <MudDivider />
    </MudCardContent>
    <MudCardActions>
        <MudGrid Spacing="1">
            <MudItem xs="12" lg="3">
                <MudButton FullWidth OnClick="ChangeEmailAddress" Color="Color.Primary" Variant="Variant.Filled">Change Email Address</MudButton>
            </MudItem>
            <MudItem xs="12" lg="3">
                <MudButton FullWidth OnClick="ChangePhoneNumber" Color="Color.Primary" Variant="Variant.Filled">Change Phone Number</MudButton>
            </MudItem>
        </MudGrid>
    </MudCardActions>
</MudCard>

<style>
    .blured {
        backdrop-filter: blur(10px);
    }
</style>

@code {
    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; }
    private ContactDataModel Model { get; set; } = new();
    private PersonalData PersonalData { get; set; } = new();
    public string Email { get; set; } = string.Empty;

    private async Task ChangeEmailAddress()
    {
        var parameters = new DialogParameters<ChangeEmailDialog>() { { x => x.Email, Email } };
        var options = new DialogOptions { CloseOnEscapeKey = true, ClassBackground = "blured", FullWidth = true };
        var dialog = await DialogService.ShowAsync<ChangeEmailDialog>("Change email address", parameters, options);
    }

    private async Task ChangePhoneNumber()
    {
        var parameters = new DialogParameters<ChangePhoneNumberDialog>() { { x => x.Email, Email } };
        var options = new DialogOptions { CloseOnEscapeKey = true, ClassBackground = "blured", FullWidth = true };
        var dialog = await DialogService.ShowAsync<ChangePhoneNumberDialog>("Change phone number", parameters, options);
    }

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateTask!;
        Email = state.User.Claims.ToList().FirstOrDefault(x => x.Type == ClaimTypes.Email)!.Value;
        await RefreshData();
    }

    private async Task RefreshData()
    {
        PersonalData = await GetPersonalData();
        Model = await SetContactData();
    }

    private async Task<ContactDataModel> SetContactData()
    {
        var state = await AuthenticationStateTask!;
        var email = state.User.Claims.FirstOrDefault(x => x.Type == ClaimTypes.Email)!.Value!;
        var data = new ContactDataModel()
            {
                Email = email,
                PhoneNumber = PersonalData.PhoneNumber
            };

        return data;
    }

    private async Task<PersonalData> GetPersonalData()
    {
        var state = await AuthenticationStateTask!;
        var id = state.User.Claims.FirstOrDefault(x => x.Type == CustomClaimTypes.Id)!.Value!;
        var result = await AuthenticationService.GetPersonalDataAsync(id);
        if (result.IsSucceeded)
        {
            var data = JsonConvert.DeserializeObject<PersonalData>(result.Result!.ToString()!)!;
            return data;
        }
        return new()
            {
                FirstName = "None",
                LastName = "None",
                Gender = "None",
                PhoneNumber = "None",
                DateOfBirth = new(2000, 1, 1)
            };
    }
}
