@inject IDialogService DialogService
@inject IAuthenticationService AuthenticationService
@inject ILocalDataAccessor LocalDataAccessor
@inject ISnackbar Snackbar

<MudCard Outlined Style="height:100%">
    <MudCardHeader>
        <MudText Typo="Typo.h5">Contact Information</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudDivider />
        <MudGrid Spacing="0">
            <MudItem xs="12" sm="3">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1"> Email </MudText>
            </MudItem>
            <MudItem xs="12" sm="9">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1"> @(string.IsNullOrEmpty(ContactDataModel.Email) ? "Loading..." : ContactDataModel.Email) </MudText>
            </MudItem>
        </MudGrid>
        <MudDivider />
        <MudGrid Spacing="0">
            <MudItem xs="12" sm="3">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1"> Phone Number </MudText>
            </MudItem>
            <MudItem xs="12" sm="9">
                <MudText Class="mx-3 my-1" Typo="Typo.subtitle1"> @(string.IsNullOrEmpty(ContactDataModel.PhoneNumber) ? "Loading..." : ContactDataModel.PhoneNumber) </MudText>
            </MudItem>
        </MudGrid>
        <MudDivider />
    </MudCardContent>
    <MudCardActions>
        <MudGrid Spacing="1">
            <MudItem xs="12" lg="3">
                <MudButton FullWidth OnClick="ChangeEmailAddress" Color="Color.Primary" Variant="Variant.Filled">Change Email Address</MudButton>
            </MudItem>
            <MudItem xs="12" lg="3">
                <MudButton FullWidth OnClick="ChangePhoneNumber" Color="Color.Primary" Variant="Variant.Filled">Change Phone Number</MudButton>
            </MudItem>
        </MudGrid>
    </MudCardActions>
</MudCard>

<style>
    .blured {
        backdrop-filter: blur(10px);
    }
</style>

@code {
    private ContactDataModel ContactDataModel { get; set; } = new();

    private async Task ChangeEmailAddress()
    {
        ;
        var options = new DialogOptions { CloseOnEscapeKey = true, ClassBackground = "blured", FullWidth = true };
        var dialog = await DialogService.ShowAsync<ChangeEmailDialog>("Change email address", options);
    }

    private async Task ChangePhoneNumber()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, ClassBackground = "blured", FullWidth = true };
        var dialog = await DialogService.ShowAsync<ChangePhoneNumberDialog>("Change phone number", options);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RefreshData();
        }

        StateHasChanged();
    }

    private async Task RefreshData()
    {
        await SetContactData();
    }

    private async Task SetContactData()
    {
        ContactDataModel.Email = await LocalDataAccessor.GetEmailAsync();
        var phoneNumber = await LocalDataAccessor.GetPhoneNumberAsync();

        if (string.IsNullOrEmpty(phoneNumber))
        {
            var email = await LocalDataAccessor.GetEmailAsync();
            var result = await AuthenticationService.GetPhoneNumber(email);

            if (result.IsSucceeded)
            {
                var response = JsonConvert.DeserializeObject<PhoneNumberResponse>(result!.Result!.ToString()!)!;
                await LocalDataAccessor.SetPhoneNumberAsync(response.PhoneNumber);
                ContactDataModel.PhoneNumber = response.PhoneNumber ?? "None";
            }
            else
            {
                Snackbar.Add(result.ErrorMessage, MudBlazor.Severity.Error);
                ContactDataModel.PhoneNumber = "None";
            }

        }
        else
        {
            ContactDataModel.PhoneNumber = phoneNumber;
        }
    }
}
