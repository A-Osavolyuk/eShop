@page "/account/login-2fa/{Email}"

@inherits PageBase

@inject IAuthenticationService AuthenticationService
@inject IValidator<TwoFactorAuthenticationLoginRequest> Validator
@inject AuthenticationStateProvider authenticationStateProvider

<Title Text="Login with 2FA" />

<MudGrid Justify="Justify.Center">
    <MudItem xs="4">
        <MudPaper Outlined Style="margin-top: 30%;" Class="pa-3">
            <EditForm FormName="login-form" Model="Model" OnValidSubmit="OnValidSubmit">
                <FluentValidationValidator Validator="Validator" />

                <MudText Align="Align.Center" Typo="Typo.h4">Two Factor Log In</MudText>
                <MudText Class="mt-2" Align="Align.Center" Typo="Typo.h5">Enter the 6-digit code that was sent to you by email</MudText>
                <MudTextField @bind-Value="Model.Code" For="(() => Model.Code)"
                              Label="Code" Immediate Variant="Variant.Outlined" />

                <MudGrid Justify="Justify.Center">
                    <MudItem xs="8">
                        <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Login"
                                   Variant="Variant.Filled" Color="Color.Primary" Class="mt-3" FullWidth>
                            Submit
                        </MudButton>
                    </MudItem>

                </MudGrid>
            </EditForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter] public string Email { get; set; } = string.Empty;
    private TwoFactorAuthenticationLoginRequest Model { get; set; } = new();

    private async Task OnValidSubmit()
    {
        var result = await AuthenticationService.LoginWithTwoFactorAuthenticationAsync(Model with { Email = Email });

        if (result.IsSucceeded)
        {
            var data = JsonConvert.DeserializeObject<LoginResponse>(result.Result!.ToString()!);
            await (authenticationStateProvider as ApplicationAuthenticationStateProvider)!.LoginAsync(data!.AccessToken, data.RefreshToken);
            NavigationManager.NavigateTo("/products");
            Snackbar.Add(result.ResultMessage, MudBlazor.Severity.Success);
        }
        else
            Snackbar.Add(result.ErrorMessage, MudBlazor.Severity.Error);
    }
}
