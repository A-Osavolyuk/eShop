@page "/account/login"
@inherits PageBase

@inject IAuthenticationService AuthenticationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject LoginValidator Validator
@inject IConfiguration Configuration

<Title Text="Login"/>

<MudGrid Justify="Justify.Center">
    <MudItem xs="12" sm="10" md="8" lg="6" xl="4" Style="margin-top: 150px">
        <MudPaper Outlined Class="pa-3" Style="margin-bottom: 10px">
            <MudText Align="Align.Center" Typo="Typo.h4">
                Log in
            </MudText>
        </MudPaper>
        <MudPaper Outlined Class="pa-3">
            <MudForm @ref="form" Model="LoginRequest" Validation="Validator.ValidateValue">
                <MudTextField @bind-Value="LoginRequest.Email" For="(() => LoginRequest.Email)"
                              InputType="InputType.Email" Label="Email" Immediate Variant="Variant.Outlined"/>
                <MudPasswordField PasswordMode="true" @bind-Value="LoginRequest.Password"
                                  For="(() => LoginRequest.Password)"
                                  Label="Password" Immediate Variant="Variant.Outlined"/>

                <MudLoadingButton LoadingAdornment="Adornment.End" ButtonType="ButtonType.Button"
                                  OnClick="async () => await LoginClick()"
                                  StartIcon="@Icons.Material.Filled.Login" Disabled="form.IsValid"
                                  Variant="Variant.Filled" Color="Color.Primary" Class="mt-3" FullWidth>
                    Log In
                </MudLoadingButton>
            </MudForm>
        </MudPaper>
        <MudPaper Outlined Class="mt-3 pa-3">
            <MudGrid Spacing="1">
                <MudItem xs="6">
                    <MudButton ButtonType="ButtonType.Button" StartIcon="@Icons.Custom.Brands.Google"
                               Variant="Variant.Filled" OnClick="@(() => ExternalLogin("Google"))"
                               Color="Color.Primary" FullWidth>
                        Google
                    </MudButton>
                </MudItem>
                <MudItem xs="6">
                    <MudButton ButtonType="ButtonType.Button" StartIcon="@Icons.Custom.Brands.Facebook"
                               Variant="Variant.Filled" OnClick="@(() => ExternalLogin("Facebook"))"
                               Color="Color.Primary" FullWidth>
                        Facebook
                    </MudButton>
                </MudItem>
                <MudItem xs="6">
                    <MudButton ButtonType="ButtonType.Button" StartIcon="@Icons.Custom.Brands.Microsoft"
                               Variant="Variant.Filled" OnClick="@(() => ExternalLogin("Microsoft"))"
                               Color="Color.Primary" FullWidth>
                        Microsoft
                    </MudButton>
                </MudItem>
                <MudItem xs="6">
                    <MudButton ButtonType="ButtonType.Button" StartIcon="@Icons.Custom.Brands.Twitter"
                               Variant="Variant.Filled" OnClick="@(() => ExternalLogin("Twitter"))"
                               Color="Color.Primary" FullWidth>
                        Twitter
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
        <MudPaper Outlined Class="mt-3 pa-3">
            <MudText Align="Align.Center">
                Do not have an account?
                <MudLink Href="account/register">Register</MudLink>
            </MudText>
        </MudPaper>
        <MudPaper Outlined Class="mt-3 pa-3">
            <MudText Align="Align.Center">
                Forget your password?
                <MudLink Href="account/reset-password">Reset password</MudLink>
            </MudText>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [SupplyParameterFromForm] private LoginRequest LoginRequest { get; set; } = new();

    [SupplyParameterFromQuery(Name = "returnUri")]
    public string ReturnUri { get; set; } = string.Empty;

    private MudForm form = new();

    protected override async Task OnInitializedAsync()
    {
        var user = await LocalDataAccessor.ReadUserDataAsync();

        if (user is not null)
        {
            NavigationManager.NavigateTo("products");
        }
    }

    private async Task LoginClick()
    {
        var result = await AuthenticationService.LoginAsync(LoginRequest);

        if (result.Success)
        {
            var data = JsonConvert.DeserializeObject<LoginResponse>(result.Result!.ToString()!);

            if (data!.HasTwoFactorAuthentication)
            {
                Snackbar.Add(result.Message, MudBlazor.Severity.Success);
                NavigationManager.NavigateTo($"/account/login-2fa/{LoginRequest.Email}");
            }
            else
            {
                await (AuthenticationStateProvider as ApplicationAuthenticationStateProvider)!.LoginAsync(data!.AccessToken, data.RefreshToken);
                NavigationManager.NavigateTo((string.IsNullOrEmpty(ReturnUri) ? "products" : ReturnUri));
                Snackbar.Add(result.Message, MudBlazor.Severity.Success);
                LoginRequest = new();
            }
        }
        else
            Snackbar.Add(result.Message, MudBlazor.Severity.Error);
    }

    private void ExternalLogin(string providerName)
    {
        var authUrl = $"{Configuration["Services:Gateway"]!}/api/v1/Auth/external-login/{providerName}";
        NavigationManager.NavigateTo(authUrl);
    }

}
