@page "/account/login"
@using eShop.Domain.DTOs
@using eShop.Domain.DTOs.Responses
@using eShop.Infrastructure.Account
@using Newtonsoft.Json

@inject ISnackbar Snackbar
@inject NavigationManager navigationManager
@inject IAuthenticationService authenticationService
@inject AuthenticationStateProvider authenticationStateProvider
@inject IValidator<LoginRequest> validator
@inject IConfiguration Configuration

<PageTitle>Login</PageTitle>

<MudGrid Justify="Justify.Center">
    <MudItem xs="4">
        <MudPaper Outlined Style="margin-top: 30%;" Class="pa-3">
            <EditForm FormName="login-form" Model="loginRequest" OnValidSubmit="LoginClick">
                <FluentValidationValidator Validator="validator" />

                <MudText Align="Align.Center" Typo="Typo.h4">Log In</MudText>
                <MudTextField @bind-Value="loginRequest.Email" For="(() => loginRequest.Email)"
                              InputType="InputType.Email" Label="Email" Immediate Variant="Variant.Outlined" />
                <MudTextField @bind-Value="loginRequest.Password" For="(() => loginRequest.Password)"
                              Label="Password" InputType="InputType.Password" Immediate Variant="Variant.Outlined" />

                <MudGrid Justify="Justify.Center">
                    <MudItem xs="8">
                        <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Login"
                                   Variant="Variant.Filled" Color="Color.Primary" Class="mt-3" FullWidth>
                            Log In
                        </MudButton>
                    </MudItem>

                </MudGrid>
            </EditForm>
        </MudPaper>
        @if (Providers.Any())
        {
            <MudPaper Outlined Class="mt-3 pa-3">
                <MudGrid Spacing="1">
                    @foreach (var p in Providers)
                    {
                        <MudItem xs="3">
                            <MudButton ButtonType="ButtonType.Button" StartIcon="@Icons.Material.Filled.Login"
                                       Variant="Variant.Filled" OnClick="(() => ExternalLogin(p.Name))" Color="Color.Primary" FullWidth>
                                @p.Name
                            </MudButton>
                        </MudItem>
                    }
                </MudGrid>
            </MudPaper>
        }
        else
        {
            <MudPaper Outlined Class="mt-3 pa-2">
                <MudGrid Justify="Justify.Center">
                    <MudItem>
                        <MudProgressCircular Color="Color.Primary" Indeterminate />
                    </MudItem>
                </MudGrid>
            </MudPaper>
        }
        <MudPaper Outlined Class="mt-3 pa-3">
            <MudText Align="Align.Center">
                Do not have an account?
                <MudLink Href="account/register">Register</MudLink>
            </MudText>
        </MudPaper>
        <MudPaper Outlined Class="mt-3 pa-3">
            <MudText Align="Align.Center">
                Forget your password?
                <MudLink Href="account/reset-password">Reset password</MudLink>
            </MudText>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [SupplyParameterFromForm] private LoginRequest loginRequest { get; set; } = new();

    private List<ExternalProviderDto> Providers { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var result = await authenticationService.GetExternalProvidersAsync();
        Providers = JsonConvert.DeserializeObject<List<ExternalProviderDto>>(result.Result.ToString()!)!;
    }

    private async Task LoginClick()
    {
        var result = await authenticationService.LoginAsync(loginRequest);

        if (result.IsSucceeded)
        {
            var data = JsonConvert.DeserializeObject<LoginResponse>(result.Result!.ToString()!);

            if (data!.HasTwoFactorAuthentication)
            {
                Snackbar.Add(result.ResultMessage, MudBlazor.Severity.Success);
                navigationManager.NavigateTo($"/account/login-2fa/{loginRequest.Email}");
            }
            else
            {
                (authenticationStateProvider as ApplicationAuthenticationStateProvider)!.UpdateAuthenticationState(data!.Token);
                navigationManager.NavigateTo("/");
                Snackbar.Add(result.ResultMessage, MudBlazor.Severity.Success);
            }
        }
        else
            Snackbar.Add(result.ErrorMessage, MudBlazor.Severity.Error);
    }

    private async Task ExternalLogin(string ProviderName)
    {
        var authUrl = $"{Configuration["Services:AuthWebApiUrl"]!}/api/v1/Auth/external-login/{ProviderName}";
        navigationManager.NavigateTo(authUrl);
    }
}
