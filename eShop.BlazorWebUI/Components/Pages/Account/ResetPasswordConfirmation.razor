@page "/account/confirm-password-reset/"
@using Microsoft.AspNetCore.WebUtilities
@using System.Text

@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthenticationService
@inject IValidator<ConfirmPasswordResetRequest> Validator

<PageTitle>Confirm password reset</PageTitle>

<MudGrid Justify="Justify.Center">
    <MudItem xs="4">
        <MudPaper Outlined Class="pa-3" Style="margin-top: 30%">
            <EditForm Model="Model" FormName="forgot-password-form" OnValidSubmit="OnValidSubmit">
                <FluentValidationValidator Validator="Validator" />

                <MudText Class="mb-10" Align="Align.Center" Typo="Typo.h5"> Confirm your password reset </MudText>
                <MudText Align="Align.Center" Typo="Typo.h6"> Enter your new password and confirm it </MudText>
                <MudTextField Label="New Password" For="@(() => Model.NewPassword)" Variant="Variant.Outlined" @bind-Value="Model.NewPassword" />
                <MudTextField Label="Confirm Password" For="@(() => Model.ConfirmNewPassword)" Variant="Variant.Outlined" @bind-Value="Model.ConfirmNewPassword" />
                <MudButton Class="mt-3" Size="Size.Large" FullWidth Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Reset Password</MudButton>

            </EditForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter] public string Email { get; set; }
    [Parameter] public string Token { get; set; }

    private ConfirmPasswordResetRequest Model { get; set; } = new();

    protected override void OnParametersSet()
    {
        var uri = new StringBuilder(NavigationManager.Uri)
            .Replace(NavigationManager.BaseUri, "")
            .Replace("account/confirm-password-reset?", "")
            .ToString();

        var query = QueryHelpers.ParseQuery(uri);

        query.TryGetValue("Email", out var email);
        query.TryGetValue("Token", out var token);

        Email = email!;
        Token = token!;
    }

    private async Task OnValidSubmit()
    {
        Model.ResetToken = Token;

        var result = await AuthenticationService.ConfirmResetPasswordAsync(Email, Model);

        if (result.IsSucceeded)
        {
            Snackbar.Add(result.ResultMessage, MudBlazor.Severity.Success);
            NavigationManager.NavigateTo("account/login");
        }

        Snackbar.Add(result.ErrorMessage, MudBlazor.Severity.Error);
    }
}
