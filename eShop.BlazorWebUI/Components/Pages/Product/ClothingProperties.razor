@using CreateProductRequest = eShop.Domain.Requests.ProductApi.Product.CreateProductRequest

<MudSelect
    T="ProductSize"
    @bind-SelectedValues="Model.Size"
    MultiSelection
    Variant="Variant.Outlined"
    Required
    RequiredError="You must choose at least one size"
    Immediate
    Placeholder="Select sizes..."
    Label="Sizes"
    ShrinkLabel
    SelectAll>
    @foreach (var size in GetSizes())
    {
        <MudSelectItem
            T="ProductSize"
            Value="Enum.Parse<ProductSize>(size)">
        </MudSelectItem>
    }
</MudSelect>
<MudSelect
    T="ProductColor"
    Variant="Variant.Outlined"
    Placeholder="Select color..."
    Label="Color"
    ShrinkLabel
    Immediate
    For="() => Model.Color"
    @bind-Value="Model.Color">
    <MudSelectItem
        Disabled
        T="ProductColor"
        Value="ProductColor.None">
    </MudSelectItem>
    @foreach (var color in GetColors())
    {
        <MudSelectItem
            T="ProductColor"
            Value="Enum.Parse<ProductColor>(color)">
        </MudSelectItem>
    }
</MudSelect>
<MudSelect
    T="Audience"
    Variant="Variant.Outlined"
    Placeholder="Select audience..."
    Label="Audience"
    ShrinkLabel
    Immediate
    For="() => Model.Audience"
    @bind-Value="Model.Audience">
    <MudSelectItem
        Disabled
        T="Audience"
        Value="Audience.None">
    </MudSelectItem>
    @foreach (var audience in GetAudience())
    {
        <MudSelectItem
            T="Audience"
            Value="Enum.Parse<Audience>(audience)">
        </MudSelectItem>
    }
</MudSelect>

@code {
    [Parameter] public CreateProductRequest Model { get; set; } = new();

    private List<string> GetSizes()
    {
        return Enum
            .GetNames<ProductSize>()
            .Where(x => x != ProductSize.None.ToString())
            .ToList();
    }

    private List<string> GetColors()
    {
        return Enum
            .GetNames<ProductColor>()
            .Where(x => x != ProductColor.None.ToString())
            .ToList();
    }

    private List<string> GetAudience()
    {
        return Enum
            .GetNames<Audience>()
            .Where(x => x != Audience.None.ToString())
            .ToList();
    }

}