@page "/products/create-product"

@using System.Runtime.InteropServices.JavaScript
@using eShop.Application.Validation.Products
@using eShop.Domain.Interfaces.Client
@using eShop.Domain.Responses.Api.Files
@using eShop.Domain.Responses.Api.Products
@using eShop.Infrastructure.State
@using LanguageExt.Pipes
@using CreateProductRequest = eShop.Domain.Requests.Api.Product.CreateProductRequest
@using Severity = MudBlazor.Severity

@inherits PageBase

@inject IProductService ProductService
@inject CreateProductValidator Validator
@inject InputImagesStateContainer InputImagesStateContainer
@inject IStoreService StoreService

<Title Text="Create product"></Title>

<MudGrid Justify="Justify.Center">
    <MudItem xs="8">
        <MudPaper Outlined Class="pa-5">
            <MudForm @ref="form" Model="Model" Validation="Validator.ValidateValue">
                <MudGrid>
                    <MudItem xs="4">
                        <ImagesInput/>
                    </MudItem>
                    <MudItem xs="8">
                        <MudText Typo="Typo.h5">Main properties</MudText>
                        <MudGrid Justify="Justify.Center">
                            @* --- Main properties --- *@
                            <MudItem xs="12">
                                @* --- Name --- *@
                                <MudTextField
                                    Variant="Variant.Outlined"
                                    Immediate
                                    AutoGrow
                                    Label="Name"
                                    For="(() => Model.Name)"
                                    @bind-Value="Model.Name"
                                    MaxLength="100"
                                    Counter="100"
                                    InputType="InputType.Text"
                                    Placeholder="Enter name...">
                                </MudTextField>
                                @* --- Description --- *@
                                <MudTextField
                                    Variant="Variant.Outlined"
                                    Immediate
                                    AutoGrow
                                    Label="Description"
                                    For="(() => Model.Description)"
                                    @bind-Value="Model.Description"
                                    MaxLength="3000"
                                    Counter="3000"
                                    Lines="5"
                                    InputType="InputType.Text"
                                    Placeholder="Enter description...">
                                </MudTextField>
                                @* --- Price fields --- *@
                                <MudGrid Justify="Justify.Center">

                                    <MudItem xs="6">
                                        <MudNumericField
                                            For="(() => Model.Price)"
                                            Immediate
                                            @bind-Value="Model.Price"
                                            Step="0.1m"
                                            Max="100000"
                                            Min="0"
                                            Variant="Variant.Outlined"
                                            Label="Price">
                                        </MudNumericField>
                                    </MudItem>
                                    <MudItem xs="6">

                                        <MudSelect
                                            Variant="Variant.Outlined"
                                            Immediate
                                            @bind-Value="Model.ProductCurrency"
                                            For="() => Model.ProductCurrency"
                                            Label="Currency">
                                            <MudSelectItem Value="ProductCurrency.None" Disabled>None</MudSelectItem>
                                            @foreach (var currency in GetCurrencies())
                                            {
                                                <MudSelectItem Value="Enum.Parse<ProductCurrency>(currency)">@currency</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>

                                </MudGrid>
                                @* --- Product Type --- *@
                                <MudSelect
                                    Variant="Variant.Outlined"
                                    For="() => Model.ProductType"
                                    @bind-Value="Model.ProductType"
                                    Immediate
                                    Label="Type">
                                    <MudSelectItem Value="ProductTypes.None" Disabled>None</MudSelectItem>
                                    @foreach (var type in GetTypes())
                                    {
                                        <MudSelectItem Value="@(Enum.Parse<ProductTypes>(type))">@type</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            @* --- Additional properties ---  *@
                            <MudItem xs="12">
                                @if (Model.ProductType != ProductTypes.None)
                                {
                                    <MudItem xs="12">
                                        <MudText Typo="Typo.h5">Additional properties</MudText>
                                    </MudItem>

                                    <MudItem xs="12">
                                        @switch (Model.ProductType)
                                        {
                                            case ProductTypes.Shoes:
                                                <ShoesProperties Model="Model"/>
                                                break;
                                            case ProductTypes.Clothing:
                                                <ClothingProperties Model="Model"/>
                                                break;
                                            case ProductTypes.Accessories:
                                                break;
                                        }
                                    </MudItem>
                                }
                            </MudItem>
                            @* --- Navigation panel --- *@
                            <MudItem xs="12">
                                <MudButton
                                    Variant="Variant.Filled"
                                    Color="Color.Success"
                                    ButtonType="ButtonType.Button"
                                    StartIcon="@Icons.Material.Filled.Create"
                                    OnClick="OnSubmit">
                                    Submit
                                </MudButton>
                                <MudButton
                                    Variant="Variant.Filled"
                                    Color="Color.Error"
                                    ButtonType="ButtonType.Button"
                                    StartIcon="@Icons.Material.Filled.Delete"
                                    OnClick="ResetForm">
                                    Reset
                                </MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private MudForm form = new();
    private CreateProductRequest Model { get; set; } = new();

    #region Private methods

    private async Task OnSubmit()
    {
        await form.Validate();
        
        if (form.IsValid)
        {
            var files = InputImagesStateContainer.UploadImages();
            var images = await UploadImagesAsync(files, Model.Id);
            Model = Model with { Images = images, Brand = new ()
            {
                Name = "Some",
                Id = Guid.NewGuid(),
                Country = "USA"
            }};
            await CreateProductAsync(Model);
        }
    }

    private List<string> GetCurrencies()
    {
        return Enum.GetNames<ProductCurrency>()
            .Where(x => x != ProductCurrency.None.ToString())
            .ToList();
    }

    private List<string> GetTypes()
    {
        return Enum.GetNames<ProductTypes>()
            .Where(x => x != ProductTypes.None.ToString())
            .ToList();
    }

    private void ResetForm()
    {
        form.ResetValidation();
        Model = new();
        InputImagesStateContainer.ClearImages();
        StateHasChanged();
    }

    private async Task<List<string>> UploadImagesAsync(IReadOnlyList<IBrowserFile> files, Guid id)
    {
        var response = await StoreService.UploadProductImagesAsync(files, id);

        if (response.Success)
        {
            var data = ResponseConverter.Deserialize<UploadProductImagesResponse>(response.Result!);
            return data.Images;
        }
        else
        {
            Snackbar.Add(response.Message, Severity.Error);
            return new();
        }
    }

    private async Task CreateProductAsync(CreateProductRequest request)
    {
        request.Article = GenerateArticle();
        var response = await ProductService.CreateProductAsync(request);

        if (response.Success)
        {
            var data = ResponseConverter.Deserialize<CreateProductResponse>(response.Result!);
            Snackbar.Add(data.Message, Severity.Success);
            NavigationManager.NavigateTo("products");
        }
        else
        {
            Snackbar.Add(response.Message, Severity.Error);
        }
    }
    
    public string GenerateArticle() => new Random().NextInt64(100_000_000, 999_999_999_999).ToString();

    #endregion

}