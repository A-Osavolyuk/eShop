@implements IDisposable
@inject IDialogService DialogService

<MudDialog @bind-Visible="visible">
    <DialogContent>
        <MudGrid Justify="Justify.FlexStart">
            <MudItem xs="12" Class="d-flex justify-content-center align-content-center">
                <MudIconButton
                    Style="height: 30px; width: 30px"
                    Class="m-auto"
                    Icon="@Icons.Material.Filled.ArrowLeft"
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    OnClick="() => LeftClick()"/>
                <MudPaper Square
                          Class="d-flex justify-content-center align-content-center mud-border-primary border-2"
                          Outlined
                          Style="height: 300px; width: 300px">
                    <MudImage Style="max-width: 100%; max-height: 100%"
                              Src="@currentImage"
                              Alt="image"
                              ObjectFit="ObjectFit.Contain"/>
                </MudPaper>
                <MudIconButton
                    Style="height: 30px; width: 30px"
                    Class="m-auto"
                    Icon="@Icons.Material.Filled.ArrowRight"
                    Variant="Variant.Filled"
                    Color="Color.Primary"
                    OnClick="() => RightClick()"/>
            </MudItem>
            <MudItem xs="12" Class="d-flex justify-content-start align-content-center">
                @foreach (var image in Images)
                {
                    <MudPaper
                        Class="@(SetActiveImage(image))"
                        Outlined
                        Square
                        Style="height: 100px; width: 100px">
                        <MudImage Style="max-width: 100%; max-height: 100%" Src="@image"
                                  Alt="image">
                        </MudImage>
                    </MudPaper>
                }
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton
            Color="Color.Error"
            Variant="Variant.Filled"
            ButtonType="ButtonType.Button"
            OnClick="() => Close()">
            Close
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public List<string> Images { get; set; } = default!;
    
    private Timer? timer;
    private string? currentImage = string.Empty;
    private bool visible = true;

    protected override async Task OnInitializedAsync()
    {
        currentImage = Images?.FirstOrDefault();
        timer = new(async void (callback) => await OnTimerElapsed(), currentImage, TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(5));
    }

    #region Private Methods

    private string SetActiveImage(string img)
    {
        return currentImage == img ? "mud-border-primary mx-1" : "mx-1";
    }

    private void LeftClick()
    {
        if (!string.IsNullOrEmpty(currentImage))
        {
            var currentIndex = Images.IndexOf(currentImage);
            var nextIndex = --currentIndex;
            currentImage = nextIndex < 0 ? Images.Last() : Images[nextIndex];
            StateHasChanged();
        }
    }

    private void RightClick()
    {
        if (!string.IsNullOrEmpty(currentImage))
        {
            var currentIndex = Images.IndexOf(currentImage);
            var nextIndex = ++currentIndex;
            currentImage = nextIndex > (Images.Count - 1) ? Images.First() : Images[nextIndex];
            StateHasChanged();
        }
    }

    private void Close() => visible = false;
    
    public void Dispose()
    {
        timer?.Dispose();
        Dispose();
    }

    private async Task OnTimerElapsed()
    {
        if (!string.IsNullOrEmpty(currentImage))
        {
            var currentIndex = Images.IndexOf(currentImage);
            var nextIndex = ++currentIndex;
            currentImage = nextIndex > (Images.Count - 1) ? Images.First() : Images[nextIndex];
            await InvokeAsync(StateHasChanged);
        }
    } 

    #endregion

}