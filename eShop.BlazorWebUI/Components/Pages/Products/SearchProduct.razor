@page "/products/search"

@inject NavigationManager NavigationManager
@inject IProductService ProductService
@inject ISnackbar Snackbar

<PageTitle>Search products</PageTitle>

@if (IsLoading)
{
    <MudProgressCircular Color="Color.Primary" Style="height:5em; width:5em;" Indeterminate="true" />
}
else
{
    if (Products.Any())
    {
        <MudGrid>
            @foreach(var p in Products)
            {
                <Product Model="p" />
            }
        </MudGrid>
    }
    else
    {
        <MudText Class="mt-5" Align="Align.Center" Typo="Typo.h3">@Message</MudText>
    }
}

@code {
    [SupplyParameterFromQuery(Name = "name")] public string Name { get; set; } = "";
    [SupplyParameterFromQuery(Name = "article")] public long Article { get; set; }
    private List<ProductDTO> Products { get; set; } = new();
    private string Message { get; set; } = string.Empty;
    private bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Name))
        {
            await SearchProductAsync(Article);
        }
        else
        {
            await SearchProductAsync(Name);
        }
    }

    private async Task SearchProductAsync(string name)
    {
        var result = await ProductService.SearchProductAsync(name);

        if (result.IsSucceeded)
        {
            var data = JsonConvert.DeserializeObject<SearchProductResponse>(result.Result!.ToString()!)!;

            if (data.Count == 1)
            {
                NavigationManager.NavigateTo($"/products/details/name={name}", true);
                IsLoading = false;
            }
            else
            {
                var response = await ProductService.GetProductsByNameAsync(name);

                if (response.IsSucceeded)
                {
                    Products = JsonConvert.DeserializeObject<List<ProductDTO>>(response.Result!.ToString()!)!;
                    IsLoading = false;
                }
                else
                {
                    Snackbar.Add(response.ErrorMessage, MudBlazor.Severity.Error);
                    IsLoading = false;
                }
            }
        }
        else
        {
            Message = $"Cannot find any product with name: \"{name}\" ";
            IsLoading = false;
        }
    }

    private async Task SearchProductAsync(long article)
    {
        var result = await ProductService.SearchProductAsync(article);

        if (result.IsSucceeded)
        {
            var data = JsonConvert.DeserializeObject<SearchProductResponse>(result.Result!.ToString()!)!;
            NavigationManager.NavigateTo($"/products/details/article={article}", true);
            IsLoading = false;
        }
        else
        {
            Message = $"Cannot find any product with article: \"{article}\" ";
            IsLoading = false;
        }
    }
}
