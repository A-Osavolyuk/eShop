@page "/products/details"
@using eShop.BlazorWebUI.Components.Shared.Comments

@inject NavigationManager NavigationManager
@inject IProductService ProductService
@inject ISnackbar Snackbar

<Title Text="@(string.IsNullOrEmpty(Model?.Name) ? "Product Details" : Model.Name)" />

@if (Model is not null)
{
    <MudGrid Justify="Justify.Center">
        <MudItem xs="10">
            <MudGrid Spacing="1">
                <MudItem xs="8">
                    <MudGrid Spacing="1">
                        <ProductImagesPreview Model="Model" />
                        <PropsAndDescription Model="Model" />
                        <Comments></Comments>
                    </MudGrid>
                </MudItem>

                <MudItem xs="4">
                    <ProductSideBar Model="Model"/>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
}
else
{
    
}

@code {
    [SupplyParameterFromQuery(Name = "name")] private string Name { get; set; } = string.Empty;
    [SupplyParameterFromQuery(Name = "article")] private long Article { get; set; }

    private ProductDto? Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Article != 0)
        {
            var result = await ProductService.GetProductByArticleAsync(Article);
            Model = DeserializeResponse(result)!;
        }
        else if (!string.IsNullOrEmpty(Name))
        {
            var result = await ProductService.GetProductByNameAsync(Name!);
            Model = DeserializeResponse(result)!;
        }

        StateHasChanged();
    }

    private ProductDto? DeserializeResponse(ResponseDTO response)
    {
        if (response.IsSucceeded)
        {
            var type = JsonConvert.DeserializeObject<ProductDto>(response.Result!.ToString()!)!.Category;

            return type switch
            {
                Category.Clothing => JsonConvert.DeserializeObject<ClothingDTO>(response.Result!.ToString()!),
                Category.Shoes => JsonConvert.DeserializeObject<ShoesDTO>(response.Result!.ToString()!),
                _ => JsonConvert.DeserializeObject<ProductDto>(response.Result!.ToString()!)
            };
        }
        else
        {
            Snackbar.Add(response.ErrorMessage, MudBlazor.Severity.Error);
            return null;
        }
    }

}