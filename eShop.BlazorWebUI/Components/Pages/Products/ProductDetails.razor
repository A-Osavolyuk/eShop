@page "/products/details"

@inject NavigationManager NavigationManager
@inject IProductService ProductService
@inject ISnackbar Snackbar

<PageTitle>Product Details</PageTitle>

<MudGrid>
    <MudItem xs="6">
        <MudPaper Class="pa-5" Outlined>
            
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [SupplyParameterFromQuery(Name = "name")] public string Name { get; set; } = string.Empty;
    [SupplyParameterFromQuery(Name = "article")] public long Article { get; set; }

    private ProductDTO Model { get; set; } = new();
    private Type Type { get; set; } = typeof(ProductDTO);

    protected override async Task OnInitializedAsync()
    {
        await GetProduct(Name, Article);
    }

    private async Task GetProduct(string? Name, long Article)
    {
        if (Article != 0)
        {
            var result = await ProductService.GetProductByArticleAsync(Article);
            Model = DeserializeResponse(result)!;
            Type = Model.GetType();
        }
        else if(!string.IsNullOrEmpty(Name))
        {
            var result = await ProductService.GetProductByNameAsync(Name!);
            Model = DeserializeResponse(result)!;
            Type = Model.GetType();
        }
    }

    private ProductDTO? DeserializeResponse(ResponseDTO response)
    {
        if (response.IsSucceeded)
        {
            var type = JsonConvert.DeserializeObject<ProductDTO>(response.Result!.ToString()!)!.ProductType;

            return type switch
            {
                ProductType.Clothing => JsonConvert.DeserializeObject<ClothingDTO>(response.Result!.ToString()!),
                ProductType.Shoes => JsonConvert.DeserializeObject<ShoesDTO>(response.Result!.ToString()!),
                _ => JsonConvert.DeserializeObject<ProductDTO>(response.Result!.ToString()!)
            };
        }
        else
        {
            Snackbar.Add(response.ErrorMessage, MudBlazor.Severity.Error);
            return null;
        }
    }
}