@using eShop.Infrastructure.StateContainers

@implements IDisposable 

@inject InputImagesStateContainer InputImagesStateContainer
@inject IDialogService DialogService

<MudStack Spacing="1">
    <MudPaper
        Outlined
        Style="height:300px"
        Class="d-flex justify-content-center align-content-center pa-1">
        @if (string.IsNullOrEmpty(CurrentImage))
        {
            <MudText Class="m-auto" Typo="Typo.body1">
                Image preview
            </MudText>
        }
        else
        {
            <MudImage
                Src="@CurrentImage"
                Alt="preview"
                Style="max-height: 100%; max-width: 100%"
                ObjectFit="ObjectFit.Contain"/>
        }
    </MudPaper>
    <MudText Class="d-flex justify-content-end" Typo="Typo.caption" Style="opacity: .8">
        Images count: @(Files?.Count ?? 0) / 20
    </MudText>
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                   Accept="@(".jpeg, .png, .jpg")"
                   AppendMultipleFiles
                   OnFilesChanged="OnInputFileChanged"
                   Hidden="@((Files?.Count ?? 0) >= 20 ? true : false)"
                   InputClass="absolute m-auto cursor-pointer mud-width-full mud-height-full z-20"
                   InputStyle="opacity:0"
                   @bind-Files="Files"
                   For="@(() => Files)"
                   SuppressOnChangeWhenInvalid>
        <ActivatorContent>
            <MudButton
                Class="cursor-pointer"
                FullWidth
                HtmlTag="button"
                Color="Color.Primary"
                Variant="Variant.Filled"
                StartIcon="@Icons.Material.Filled.FileOpen"
                Disabled="@((Files?.Count ?? 0) >= 20 ? true : false)">
                Choose files
            </MudButton>
        </ActivatorContent>
    </MudFileUpload>
    <MudButton
        ButtonType="ButtonType.Button"
        Color="Color.Error"
        Variant="Variant.Filled"
        StartIcon="@Icons.Material.Filled.Delete"
        FullWidth
        OnClick="ClearImages">
        Clear images
    </MudButton>
    <MudButton
        ButtonType="ButtonType.Button"
        Color="Color.Info"
        Variant="Variant.Filled"
        StartIcon="@Icons.Material.Filled.Preview"
        FullWidth
        OnClick="async () => await OnPreviewImages()"
        Disabled="@(!Images.Any())">
        Preview images
    </MudButton>
</MudStack>

@code {
    [Parameter] public IReadOnlyList<IBrowserFile> Files { get; set; } = default!;
    private string CurrentImage { get; set; } = string.Empty;
    private List<string> Images { get; set; } = new();

    protected override void OnInitialized()
    {
        InputImagesStateContainer.ClearImages += ClearImages;
        InputImagesStateContainer.ClearImages += StateHasChanged;
    }

    private async Task OnPreviewImages()
    {
        var parameters = new DialogParameters<ImagesPreviewDialog>()
        {
            { x => Images, Images }
        };

        var options = new DialogOptions()
        {
            CloseButton = true,
        };

        await DialogService.ShowAsync<ImagesPreviewDialog>("Images preview", parameters, options);
    }

    private async void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        Files = e.GetMultipleFiles();
        CurrentImage = await CreateImageUrl(Files.First());

        foreach (var file in Files)
        {
            Images.Add(await CreateImageUrl(file));
        }
        
        StateHasChanged();
    }

    private async Task<string> CreateImageUrl(IBrowserFile file)
    {
        var buffer = new byte[file.Size];
        await using var stream = file.OpenReadStream();
        await stream.ReadAsync(buffer);
        var base64 = Convert.ToBase64String(buffer);
        var imageUrl = $"data:{file.ContentType};base64,{base64}";
        return imageUrl;
    }

    private void ClearImages()
    {
        Files = default!;
        CurrentImage = string.Empty;
        Images.Clear();
        StateHasChanged();
    }

    public void Dispose()
    {
        InputImagesStateContainer.ClearImages -= ClearImages;
        InputImagesStateContainer.ClearImages -= StateHasChanged;
    }

}