@page "/products/create-product"

@inject NavigationManager NavigationManager
@inject IProductService ProductService
@inject IBrandService BrandService
@inject ISnackbar Snackbar
@inject IMapper Mapper
@inject IValidator<CreateProductRequest> Validator

<MudGrid Justify="Justify.Center">
    <MudItem xs="2">

    </MudItem>
    <MudItem xs="8">
        <MudPaper Class="pa-5" Outlined>
            <EditForm OnValidSubmit="Some" Model="Model">
                <MudGrid Spacing="1">
                    <FluentValidationValidator Validator="Validator" />
                    <MudItem xs="12">
                        <MudTextField T="string" Counter="200" Variant="Variant.Outlined" For="@(() => Model.Name)"
                                      Label="Name" ShrinkLabel Placeholder="Enter product name..." MaxLength="200" Immediate Clearable @bind-Value="Model.Name" />
                        <MudTextField T="string" Counter="2000" Variant="Variant.Outlined" For="@(() => Model.Description)"
                                      Label="Description" ShrinkLabel Placeholder="Enter description..." MaxLength="2000" Lines="3" AutoGrow Immediate Clearable @bind-Value="Model.Description" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudNumericField T="decimal" Variant="Variant.Outlined" For="@(() => Model.Price)" @bind-Value="Model.Price"
                                         Label="Price" Max="10000" Immediate Clearable />
                    </MudItem>
                    <MudItem xs="6">
                        <MudSelect T="Currency" Variant="Variant.Outlined" For="@(() => Model.Currency)" @bind-Value="Model.Currency" Immediate Label="Currency">
                            <MudSelectItem Disabled T="Currency" Value="Currency.None"> @Currency.None </MudSelectItem>
                            @foreach (var currency in Currencies.Where(_ => _ is not Currency.None))
                            {
                                <MudSelectItem T="Currency" Value="currency">@currency</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12">
                        <MudSelect T="Guid" Variant="Variant.Outlined" For="@(() => Model.BrandId)" @bind-Value="Model.BrandId" Immediate Label="Brand">
                            <MudSelectItem T="Guid" Value="Guid.Empty"> Without brand </MudSelectItem>
                            @foreach (var brand in Brands)
                            {
                                <MudSelectItem T="Guid" Value="brand.Id"> @brand.Name </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12">
                        <MudSelect T="Categoty" Variant="Variant.Outlined" For="@(() => Model.Category)" @bind-Value="Model.Category" Immediate Label="Category">
                            <MudSelectItem Disabled T="Categoty" Value="Categoty.None"> @Categoty.None </MudSelectItem>
                            @foreach (var type in ProductTypes.Where(_ => _ is not Categoty.None))
                            {
                                <MudSelectItem T="Categoty" Value="type"> @type </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12">
                        @switch (Model.Category)
                        {
                            case Categoty.Clothing: <ClothingComponent Model="Model" /> break;
                        }
                    </MudItem>
                    <MudItem xs="12">
                        <MudButton Color="Color.Success" ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save"
                                   OnClick="OnClick">Save</MudButton>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudPaper>
    </MudItem>
    <MudItem xs="2">

    </MudItem>
</MudGrid>

@code {
    private CreateProductRequest Model { get; set; } = new();

    private IList<Currency> Currencies = Enum.GetValues<Currency>().ToList();
    private IList<ProductColor> Colors = Enum.GetValues<ProductColor>().ToList();
    private IList<Categoty> ProductTypes = Enum.GetValues<Categoty>().ToList();
    private IList<BrandDTO> Brands { get; set; } = new List<BrandDTO>();
    private string BrandName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var brandResponse = await BrandService.GetBrandsListAsync();

        if (brandResponse.IsSucceeded)
        {
            var serializedResult = brandResponse.Result;
            Brands = ResponseConverter.Deserialize<List<BrandDTO>>(brandResponse.Result!);
        }
        else
        {
            Snackbar.Add(brandResponse.ErrorMessage, MudBlazor.Severity.Error);
        }
    }

    private void OnClick()
    {

    }

    private void Some(){}
}