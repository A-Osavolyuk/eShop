@page "/products/create-product"

@using Product = Domain.Entities.Product

@inject NavigationManager NavigationManager
@inject IProductService ProductService
@inject IBrandService BrandService
@inject ISnackbar Snackbar
@inject IMapper Mapper
@inject IValidator<CreateProductRequest> Validator

<MudGrid Justify="Justify.Center">
    <MudItem xs="2">

    </MudItem>
    <MudItem xs="8">
        <MudPaper Class="pa-5" Outlined>
            <MudForm @ref="Form" Model="CurrentProduct" Validation="ProductValidation.ValidateValue">
                <MudGrid>
                    <MudItem xs="4">
                        <ImagesDragAndDrop Model="CurrentProduct" />
                    </MudItem>
                    <MudItem xs="8">
                        <MudGrid Spacing="1">
                            <MudItem xs="12">
                                <MudTextField T="string" Counter="200" Variant="Variant.Outlined" For="@(() => CurrentProduct.Name)"
                                              Label="Name" ShrinkLabel Placeholder="Enter product name..." MaxLength="200" Immediate Clearable @bind-Value="CurrentProduct.Name" />
                                <MudTextField T="string" Counter="2000" Variant="Variant.Outlined" For="@(() => CurrentProduct.Description)"
                                              Label="Description" ShrinkLabel Placeholder="Enter description..." MaxLength="2000" Lines="3" AutoGrow Immediate Clearable @bind-Value="CurrentProduct.Description" />
                            </MudItem>
                            <MudItem xs="6">
                                <MudNumericField T="decimal" Variant="Variant.Outlined" For="@(() => CurrentProduct.Price)" @bind-Value="CurrentProduct.Price"
                                                 Label="Price" Max="10000" Immediate Clearable />
                            </MudItem>
                            <MudItem xs="6">
                                <MudSelect T="Currency" Variant="Variant.Outlined" For="@(() => CurrentProduct.Currency)" @bind-Value="CurrentProduct.Currency" Immediate Label="Currency">
                                    <MudSelectItem Disabled T="Currency" Value="Currency.None"> @Currency.None </MudSelectItem>
                                    @foreach (var currency in Currencies.Where(_ => _ is not Currency.None))
                                    {
                                        <MudSelectItem T="Currency" Value="currency">@currency</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <MudSelect T="Guid" Variant="Variant.Outlined" For="@(() => CurrentProduct.BrandId)" @bind-Value="CurrentProduct.BrandId" Immediate Label="Brand">
                                    <MudSelectItem T="Guid" Value="Guid.Empty"> Without brand </MudSelectItem>
                                    @foreach (var brand in Brands)
                                    {
                                        <MudSelectItem T="Guid" Value="brand.Id"> @brand.Name </MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12">
                                <MudSelect T="Categoty" Variant="Variant.Outlined" For="@(() => CurrentProduct.Category)" @bind-Value="CurrentProduct.Category"
                                           @bind-Value:after="@(() => StateHasChanged())" Immediate Label="Category">
                                    <MudSelectItem Disabled T="Categoty" Value="Categoty.None"> @Categoty.None </MudSelectItem>
                                    @foreach (var type in ProductTypes.Where(_ => _ is not Categoty.None))
                                    {
                                        <MudSelectItem T="Categoty" Value="type"> @type </MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="12">
                                @switch (CurrentProduct.Category)
                                {
                                    case Categoty.Clothing:
                                        <ClothingComponent Model="CurrentProduct" />
                                        break;
                                    case Categoty.Shoes:
                                        <ShoesComponent Model="CurrentProduct" />
                                        break;
                                }
                            </MudItem>
                            <MudItem xs="12">
                                <MudButton Color="Color.Success" OnClick="@(async () => await SaveProduct())" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save">Save</MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                </MudGrid>
            </MudForm>
        </MudPaper>
    </MudItem>
    <MudItem xs="2">

    </MudItem>
</MudGrid>

@code {
    private CreateProductModel CurrentProduct { get; set; } = new();
    private HashSet<Product> Products { get; set; } = new();
    private MudForm Form = new();
    private CreateProductValidator ProductValidation = new();

    private IList<Currency> Currencies = Enum.GetValues<Currency>().ToList();
    private IList<ProductColor> Colors = Enum.GetValues<ProductColor>().ToList();
    private IList<Categoty> ProductTypes = Enum.GetValues<Categoty>().ToList();
    private IList<BrandDTO> Brands { get; set; } = new List<BrandDTO>();

    protected override async Task OnInitializedAsync()
    {
        var brandResponse = await BrandService.GetBrandsListAsync();

        if (brandResponse.IsSucceeded)
        {
            var serializedResult = brandResponse.Result;
            Brands = ResponseConverter.Deserialize<List<BrandDTO>>(brandResponse.Result!);
        }
        else
        {
            Snackbar.Add(brandResponse.ErrorMessage, MudBlazor.Severity.Error);
        }
    }

    private async Task SaveProduct()
    {
        await Form.Validate();
    }

    public class CreateProductValidator : AbstractValidator<CreateProductModel>
    {
        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<CreateProductModel>.CreateWithOptions((CreateProductModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };

        public CreateProductValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty().WithMessage("Name cannot be empty")
                .MinimumLength(8).WithMessage("Name must contain at least 8 characters")
                .MaximumLength(200).WithMessage("Name cannot be longer then 200 characters");

            RuleFor(x => x.Description)
                .NotEmpty().WithMessage("Description cannot be empty")
                .MinimumLength(32).WithMessage("Description must contain at least 32 characters")
                .MaximumLength(2000).WithMessage("Description cannot be longer then 2000 characters");

            RuleFor(x => x.Category)
                .IsInEnum().WithMessage("Invalid value")
                .NotEqual(Categoty.None).WithMessage("Choose your category");

            RuleFor(x => x.Currency)
                .IsInEnum().WithMessage("Invalid value")
                .NotEqual(Currency.None).WithMessage("Choose your currency");

            RuleFor(x => x.Price)
                .LessThan(100_000m).WithMessage("Price cannot be higher then 100 000")
                .GreaterThan(0.1m).WithMessage("Price cannot be lower then 0.1");

            RuleFor(x => x.Files)
                .NotEmpty().WithMessage("Your product must contain at least one image");

            RuleFor(x => x.Compound)
                .NotEmpty().WithMessage("Your have to specify compound of your product");

            RuleFor(x => x.Audience)
                .NotEqual(Audience.None).WithMessage("Pick your audience").When((request) =>
                {
                    return request.Category switch
                    {
                        Categoty.Clothing => true,
                        Categoty.Shoes => true,
                        Categoty.None or _ => false,
                    };
                });

            RuleFor(x => x.Color)
                .NotEqual(ProductColor.None).WithMessage("Pick your color").When((request) =>
                {
                    return request.Category switch
                    {
                        Categoty.Clothing => true,
                        Categoty.Shoes => true,
                        Categoty.None or _ => false,
                    };
                });

            RuleFor(x => x.Sizes).NotNull();

            RuleForEach(x => x.Sizes)
                .NotEqual(ProductSize.None).WithMessage("Pick your sizes").When((request) =>
                {
                    return request.Category switch
                    {
                        Categoty.Clothing => true,
                        Categoty.Shoes => true,
                        Categoty.None or _ => false,
                    };
                });
        }
    }
}