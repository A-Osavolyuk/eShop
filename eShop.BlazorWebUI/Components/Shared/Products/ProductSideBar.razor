@using eShop.Application.Mapping
@using eShop.Domain.DTOs.ProductApi
@using eShop.Domain.Entities.CartApi
@using Severity = MudBlazor.Severity
@using eShop.Infrastructure.StateContainers
@using eShop.Infrastructure.Services
@inject NavigationManager NavigationManager
@inject ILocalDataAccessor LocalDataAccessor
@inject ISnackbar Snackbar
@inject INotificationService NotificationService
@inject IFavoritesService FavoritesService
@inject ICartService CartService

<MudGrid Spacing="1">
    <MudItem xs="12">
        <MudPaper Outlined Class="pa-5">
            <MudGrid Spacing="1" Justify="Justify.Center">
                <MudItem Class="pb-0" xs="11">
                    <MudText Typo="Typo.h6">@Model.Name</MudText>
                </MudItem>
                <MudItem xs="1">
                    <MudIconButton Style="padding:0"
                                   OnClick="async () => await AddToFavorite_OnClick()"
                                   Color="Color.Error" Icon="@(isFavorite ? Icons.Material.Outlined.Favorite : Icons.Material.Outlined.FavoriteBorder)" />
                </MudItem>
                <MudItem Class="pt-0 pb-0" xs="12">
                    <MudText Style="opacity:0.5" Typo="Typo.subtitle2">Article: @Model.Article</MudText>
                </MudItem>
                <MudItem Class="pt-0 pb-0" xs="12">
                    <MudText Typo="Typo.subtitle2" Color="Color.Success">Ready to ship</MudText>
                </MudItem>
                <MudItem Class="my-2" xs="12">
                    <MudText Color="Color.Error" Typo="Typo.h4">
                        @Convert.ToInt32(Model.Price)
                        <MudText Inline Color="Color.Error" Typo="Typo.subtitle2">&dollar;</MudText>
                    </MudText>
                </MudItem>
                <MudItem xs="6">
                    <MudButton Color="Color.Primary"
                               Variant="Variant.Filled"
                               ButtonType="ButtonType.Button"
                               StartIcon="@Icons.Material.Filled.Sell"
                               OnClick="@(() => NavigationManager.NavigateTo($"/products/quick-buy/{Model.Article}"))"
                               FullWidth>
                        Buy now
                    </MudButton>
                </MudItem>
                <MudItem xs="6">
                    <MudButton Color="Color.Primary"
                               Variant="Variant.Filled"
                               ButtonType="ButtonType.Button"
                               StartIcon="@Icons.Material.Filled.ShoppingCart"
                               OnClick="@(async () => await AddToCart_OnClick())"
                               FullWidth>
                        Add to card
                    </MudButton>
                </MudItem>
                <MudItem Class="mt-1" xs="12">
                    <MudLink Href="#seller" Class="cursor-pointer" Typo="Typo.subtitle2" Color="Color.Default">
                        Seller: Some seller name
                    </MudLink>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Outlined Class="pa-5">
            <MudGrid Spacing="1" Justify="Justify.Center">
                <MudItem Class="pb-0" xs="12">
                    <MudText Typo="Typo.h6">Delivery</MudText>
                </MudItem>
                <MudItem xs="12" Class="d-flex align-content-center">
                    <MudGrid Spacing="1">
                        <MudItem xs="12" Class="">
                            <MudGrid Spacing="1">
                                <MudItem xs="7">
                                    <MudIcon Color="Color.Secondary" Style="margin-right:10px" Icon="@Icons.Material.Filled.Store" />
                                    <MudText Typo="Typo.body2" Inline>Pick up from the store</MudText>
                                </MudItem>
                                <MudItem xs="5" Class="m-auto">
                                    <MudText Inline Typo="Typo.caption" Style="opacity:.5">Free (Mn-Fr 09:00 - 20:00)</MudText>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                        <MudItem xs="12" Class="d-flex justify-content-between">
                            <MudGrid Spacing="1">
                                <MudItem xs="7">
                                    <MudIcon Color="Color.Info" Style="margin-right:10px" Icon="@Icons.Material.Filled.LocalPostOffice" />
                                    <MudText Typo="Typo.body2" Inline>Delivery to the post office</MudText>
                                </MudItem>
                                <MudItem xs="5" Class="m-auto">
                                    <MudText Inline Style="opacity:.5" Typo="Typo.caption">At your post office rates</MudText>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                        <MudItem xs="12" Class="d-flex justify-content-between">
                            <MudGrid Spacing="1">
                                <MudItem xs="7">
                                    <MudIcon Color="Color.Primary" Style="margin-right:10px" Icon="@Icons.Material.Filled.DeliveryDining" />
                                    <MudText Typo="Typo.body2" Inline>Home delivery</MudText>
                                </MudItem>
                                <MudItem xs="5" Class="m-auto">
                                    <MudText Inline Style="opacity:.5" Typo="Typo.caption">From 10$ to 50$</MudText>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Outlined Class="pa-5">
            <MudGrid Spacing="1" Justify="Justify.Center">
                <MudItem Class="pb-0" xs="12">
                    <MudText Typo="Typo.h6">Payment</MudText>
                </MudItem>
                <MudItem xs="12">
                    <MudGrid Spacing="1">
                        <MudItem xs="12">
                            <MudGrid Spacing="1">
                                <MudItem xs="7">
                                    <MudIcon Color="Color.Primary" Style="margin-right:10px" Icon="@Icons.Material.Filled.CreditCard" />
                                    <MudText Typo="Typo.body2" Inline>Payment by card</MudText>
                                </MudItem>
                                <MudItem xs="5">
                                    <MudText Typo="Typo.caption" Style="opacity:.5" Inline>No transfer fee</MudText>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                        <MudItem xs="12">
                            <MudGrid Spacing="1">
                                <MudItem xs="7">
                                    <MudIcon Color="Color.Success" Style="margin-right:10px" Icon="@Icons.Material.Filled.Check" />
                                    <MudText Typo="Typo.body2" Inline>After payment</MudText>
                                </MudItem>
                                <MudItem xs="5">
                                    <MudText Typo="Typo.caption" Style="opacity:.5" Inline>Transfer fee 2%</MudText>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                        <MudItem xs="12">
                            <MudGrid Spacing="1">
                                <MudItem xs="7">
                                    <MudIcon Color="Color.Error" Style="margin-right:10px" Icon="@Icons.Material.Filled.Percent" />
                                    <MudText Typo="Typo.body2" Inline>Installment plan</MudText>
                                </MudItem>
                                <MudItem xs="5">
                                    <MudText Typo="Typo.caption" Style="opacity:.5" Inline>Interest on installments 2%</MudText>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Outlined Class="pa-5">
            <MudGrid Spacing="1" Justify="Justify.Center">
                <MudItem Class="pb-0" xs="12">
                    <MudText Typo="Typo.h6">Warranty</MudText>
                </MudItem>
                <MudItem xs="12">
                    <MudGrid Spacing="1">
                        <MudItem xs="7">
                            <MudIcon Color="Color.Info" Style="margin-right:10px" Icon="@Icons.Material.Filled.Shield" />
                            <MudText Typo="Typo.body2" Inline>Warranty term</MudText>
                        </MudItem>
                        <MudItem xs="5">
                            <MudText Typo="Typo.caption" Style="opacity:.5">
                                12 months
                            </MudText>
                        </MudItem>
                        <MudItem xs="12">
                            <MudText Inline Typo="Typo.caption" Style="opacity:.5">
                                Each product has a warranty period of 12 to 72 months depending on the cost and type of product.
                                The main conditions for exchange/return under warranty are: keeping the receipt for payment for
                                the product, keeping the basic packaging of the product. Read more about the warranty conditions
                                and the return/exchange procedure in warranty cases
                            </MudText>
                            <MudLink Class="cursor-pointer" Href="company-policy/terms#warranty" Typo="Typo.caption">here</MudLink>.
                        </MudItem>
                    </MudGrid>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [Parameter, NotNull] public ProductDto Model { get; set; } = new();
    [CascadingParameter] MainLayout Layout { get; set; } = new();

    private bool isFavorite = false;

    protected override async Task OnInitializedAsync()
    {
        isFavorite = await LocalDataAccessor.IsInFavoriteGoodsAsync(Model.Id.ToString());
    }

    private async Task AddToCart_OnClick()
    {
        await NotificationService.IncrementNotificationsCountAsync();
        await LocalDataAccessor.AddToCartAsync(new CartItem()
            {
                ProductId = Model.Id,
                ProductArticle = Model.Article,
                AddedAt = DateTime.UtcNow,
                Amount = 1,
            });

        Snackbar.Add("Product was added to your cart", MudBlazor.Severity.Success);
        StateHasChanged();
        await UpdateCartAsync();
    }

    private async Task AddToFavorite_OnClick()
    {
        if (isFavorite)
        {
            await NotificationService.DecrementNotificationsCountAsync();
            await LocalDataAccessor.RemoveFromFavoritesAsync(Model.Id.ToString());
            Snackbar.Add("Product was removed from favorite list", MudBlazor.Severity.Success);
        }
        else
        {
            await NotificationService.IncrementNotificationsCountAsync();
            await LocalDataAccessor.AddToFavoritesAsync(new()
                {
                    AddedAt = DateTime.UtcNow,
                    ProductId = Model.Id,
                    ProductArticle = Model.Article,

                });
            Snackbar.Add("Product was added to favorite list", MudBlazor.Severity.Success);
        }
        isFavorite = !isFavorite;
        StateHasChanged();
        await UpdateFavoritesAsync();
    }

    private async Task UpdateCartAsync()
    {
        var cart = await LocalDataAccessor.ReadCartAsync();
        var request = CartMapper.ToUpdateCartRequest(cart);
        var response = await CartService.UpdateCartAsync(request);

        if (!response.Success)
        {
            Snackbar.Add(response.Message, Severity.Error);
        }
    }
    
    private async Task UpdateFavoritesAsync()
    {
        var favorites = await LocalDataAccessor.ReadFavoritesAsync();
        var request = FavoritesMapper.ToUpdateFavoritesRequest(favorites);
        var response = await FavoritesService.UpdateFavoritesAsync(request);

        if (!response.Success)
        {
            Snackbar.Add(response.Message, Severity.Error);
        }
    }
}
