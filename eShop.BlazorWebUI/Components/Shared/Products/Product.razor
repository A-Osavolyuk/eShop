@using eShop.Domain.DTOs.ProductApi
@inject NavigationManager NavigationManager

@if (Model is not null)
{
    <MudItem lg="3" md="4" sm="6" xs="12">
        <MudCard>
            <MudCardMedia Class="cursor-pointer" @onclick=@(() => ToProductDetails(Model.Article)) Image="@Model.Images[0]"></MudCardMedia>
            <MudCardContent>
                <MudText Typo="Typo.h6">
                    <MudLink OnClick="@(() => ToBrandDetails(Model.Brand?.Name ?? "Brand"))"
                             Typo="Typo.h6"
                             Color="Color.Inherit">@(Model.Brand?.Name ?? "Brand")</MudLink> | @(FormatName(Model.Name))
                </MudText>
                <MudGrid>
                    <MudItem Class="d-flex">
                        @* <MudText Typo="Typo.h6" Class="mr-1" Color="Color.Warning">@Model.Rating</MudText> *@
                        @* <MudRating Class="mt-1" ReadOnly SelectedValue="Model.Rating" /> *@
                        @* <MudText Typo="Typo.subtitle2">(@Model.CommentsCount)</MudText> *@
                    </MudItem>
                </MudGrid>
                <MudText Typo="Typo.h6" Color="Color.Success">@Model.Price &dollar;</MudText>
            </MudCardContent>
        </MudCard>
    </MudItem>
}

@code {
    [Parameter] public ProductDto? Model { get; set; } = new();

    protected override void OnInitialized()
    {

    }

    private void ToProductDetails(string article)
    {
        NavigationManager.NavigateTo($"/products/details?article={article}");
    }

    private void ToBrandDetails(string name)
    {
        NavigationManager.NavigateTo($"/brands/details?name={name}");
    }

    private string FormatName(string name)
    {
        if (name == null) throw new ArgumentNullException(nameof(name));
        return name.Length > 20
        ? $"{name.Take(20).Aggregate(new StringBuilder(), (acc, v) => acc.Append(v), r => r.Append("...").ToString())}"
        : $"{name}";
    }
}
