@inject NavigationManager NavigationManager

<MudItem lg="3" md="4" sm="6" xs="12">
    <MudCard>
        <MudCardMedia Class="cursor-pointer" @onclick=@(() => ToProductDetails(Model.Article)) Image="@Model.Images[0]"></MudCardMedia>
        <MudCardContent>
            <MudText Typo="Typo.h6">
                <MudLink OnClick="@(() => ToBrandDetails(Model.Brand.Name))"
                         Typo="Typo.h6"
                         Color="Color.Inherit">@Model.Brand.Name</MudLink> | @(FormatName(Model.Name))
            </MudText>
            <MudGrid>
                <MudItem Class="d-flex">
                    <MudText Typo="Typo.h6" Class="mr-1" Color="Color.Warning">@Model.Rating</MudText>
                    <MudRating Class="mt-1" ReadOnly SelectedValue="Model.Rating" />
                    <MudText Typo="Typo.subtitle2">(@Model.ReviewsCount)</MudText>
                </MudItem>
            </MudGrid>
            <MudText Typo="Typo.h6" Color="Color.Success">@Model.Price &dollar;</MudText>
        </MudCardContent>
    </MudCard>
</MudItem>

@code {
    [Parameter] public ProductDTO Model { get; set; } = new();

    protected override void OnInitialized()
    {
        Model = Model with { Rating = 5 };
    }

    private void ToProductDetails(long Article)
    {
        NavigationManager.NavigateTo($"/products/details?article={Article}", true);
    }

    private void ToBrandDetails(string Name)
    {
        NavigationManager.NavigateTo($"/brands/details?={Name}", true);
    }

    private string FormatName(string Name)
    {
        return Name.Length > 20
        ? $"{Name.Take(20).Aggregate(new StringBuilder(), (acc, v) => acc.Append(v), r => r.Append("...").ToString())}"
        : $"{Name}";
    }
}
