@inject IJSRuntime JSRuntime

@if (Model is not null)
{
    <MudItem xs="12">
        <MudPaper Outlined Class="pa-5">
            <MudGrid Spacing="1">
                <MudItem xs="1">
                    <MudIconButton Color="Color.Primary"
                                   Variant="Variant.Filled"
                                   Class="mb-1 rounded-sm w-100"
                                   Size="Size.Small"
                                   Icon="@Icons.Material.Filled.KeyboardArrowUp"
                                   OnClick="ScrollToTop"
                                   Disabled="IsOnTop" />
                    <div style="overflow:hidden; max-height:430px" id="slider">
                        @foreach (var img in Model.Images)
                        {
                            <MudImage Src="@img"
                                      Style="width:100%; height:50px"
                                      Class="mb-1"
                                      @onclick="@(() => SetPreviewImage(img))" />
                        }
                    </div>
                    <MudIconButton Color="Color.Primary"
                                   Variant="Variant.Filled"
                                   Class="mt-1 rounded-sm w-100"
                                   Size="Size.Small"
                                   Icon="@Icons.Material.Filled.KeyboardArrowDown"
                                   OnClick="ScrollToBottom"
                                   Disabled="IsOnBottom" />
                </MudItem>
                <MudItem xs="11">
                    <MudImage Src="@Model.Images[SelectedIndex]"
                              Style="width:100%; max-height:500px"
                              ObjectFit="ObjectFit.Contain" />
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>
}

@code {
    [Parameter, NotNull] public ProductDTO Model { get; set; } = new();

    private int SelectedIndex = 0;
    private bool IsOnTop = true;
    private bool IsOnBottom = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CheckSliderPosition();
        }
    }

    private void SetPreviewImage(string img)
    {
        SelectedIndex = Model.Images.IndexOf(img);
    }

    private async Task ScrollToTop()
    {
        IsOnTop = await JSRuntime.InvokeAsync<bool>("slideTop", 200, "slider");
        IsOnBottom = false;
    }

    private async Task ScrollToBottom()
    {
        IsOnBottom = await JSRuntime.InvokeAsync<bool>("slideBottom", 200, "slider");
        IsOnTop = false;
    }

    private void ResetPreviewImage()
    {
        SelectedIndex = 1;
    }

    private async Task CheckSliderPosition()
    {
        IsOnTop = await JSRuntime.InvokeAsync<bool>("isOnTop");
        IsOnBottom = await JSRuntime.InvokeAsync<bool>("isOnBottom");
    }
}
