@if (Divided)
{
    <MudDivider></MudDivider>
}
<MudItem xs="3" Class="m-auto">
    <MudText Typo="Typo.body2">@Label</MudText>
</MudItem>
<MudItem xs="8" Class="m-auto">
    <MudText Color="@(HasValue())" Typo="Typo.body2">@(ValidateValue())</MudText>
</MudItem>
<MudItem xs="1">
    @if (HasButton)
    {
        if (string.IsNullOrEmpty(Tooltip))
        {
            <MudIconButton ButtonType="ButtonType.Button" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" OnClick="OnEditClick" />
        }
        else
        {
            <MudTooltip Text="@Tooltip" Color="Color.Primary">
                <MudIconButton ButtonType="ButtonType.Button" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" OnClick="OnEditClick" />
            </MudTooltip>
        }

    }
</MudItem>

@code {
    [Parameter] public bool Divided { get; set; } = true;
    [Parameter] public bool HasButton { get; set; } = false;
    [Parameter] public string Tooltip { get; set; } = string.Empty;
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public string Text { get; set; } = string.Empty;
    [Parameter] public EventCallback OnEditClick { get; set; }

    private string ValidateValue()
    {
        if (Text is null)
        {
            return "Loading...";
        }
        else if (string.IsNullOrEmpty(Text))
        {
            return "None";
        }
        return Text;
    }

    private Color HasValue()
    {
        if (Text is null)
        {
            return Color.Inherit;
        }
        else if (string.IsNullOrEmpty(Text))
        {
            return Color.Error;
        }
        return Color.Inherit;
    }
}
